PROJECT EXPORT

PROJECT STRUCTURE:

üìÅ bot
  üìÅ src
    üìÑ bot.py
    üìÑ config.py
    üìÑ database.py
    üìÑ perplexity.py
    üìÑ postgres_db.py
    üìÑ scraper.py
    üìÑ state_utils.py
    üìÑ telegram_utils.py
    üìÑ text_utils.py
  üìÑ .env
  üìÑ Dockerfile
  üìÑ requirements.txt
üìÅ data
üìÅ logs
üìÅ pgadmin
  üìÑ setup.sh
üìÑ .env
üìÑ .env.dev
üìÑ .gitignore
üìÑ dev.sh
üìÑ docker-compose.dev.yml
üìÑ docker-compose.infrastructure.yml
üìÑ docker-compose.yml
üìÑ Makefile
üìÑ project-export.txt
üìÑ README.md

FILES:

=== dev.sh ===

#!/bin/bash
# dev.sh - —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

case "$1" in
    "start")
        echo "–ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
        docker-compose -f docker-compose.infrastructure.yml up -d
        echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ë–î..."
        sleep 10
        echo "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
        docker-compose -f docker-compose.dev.yml up --build
        ;;
    "stop")
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
        docker-compose -f docker-compose.dev.yml down
        ;;
    "restart")
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
        docker-compose -f docker-compose.dev.yml down
        docker-compose -f docker-compose.dev.yml up --build
        ;;
    "infra-stop")
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
        docker-compose -f docker-compose.infrastructure.yml down
        ;;
    "logs")
        docker-compose -f docker-compose.dev.yml logs -f
        ;;
    "status")
        echo "=== –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ==="
        docker-compose -f docker-compose.infrastructure.yml ps
        echo "=== –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ==="
        docker-compose -f docker-compose.dev.yml ps
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|infra-stop|logs|status}"
        echo ""
        echo "start       - –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –±–æ—Ç–∞"
        echo "stop        - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞"
        echo "restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞"
        echo "infra-stop  - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
        echo "logs        - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –±–æ—Ç–∞"
        echo "status      - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        exit 1
        ;;
esac


========================================

=== README.md ===

##Settings for connect
Host name/address: db
Port: 5432
Maintenance database: nlstore
Username: {your_username}
Password: {your_pass}


#work with db throw query service:
#check catalog
SELECT datname FROM pg_catalog.pg_database WHERE datistemplate = false;

#check tables
SELECT tablename FROM pg_tables WHERE schemaname = 'public';

----
# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º (—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª Makefile –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º)

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ë–î + pgAdmin)
infra-up:
	docker-compose -f docker-compose.infrastructure.yml up -d

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
infra-down:
	docker-compose -f docker-compose.infrastructure.yml down

# –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –±–æ—Ç)
dev-up:
	docker-compose -f docker-compose.dev.yml up --build

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-down:
	docker-compose -f docker-compose.dev.yml down

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞
dev-restart:
	docker-compose -f docker-compose.dev.yml down
	docker-compose -f docker-compose.dev.yml up --build

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
prod-up:
	docker-compose -f docker-compose.prod.yml up -d

# –õ–æ–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-logs:
	docker-compose -f docker-compose.dev.yml logs -f

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db-connect:
	docker exec -it $$(docker ps -q -f "name=db") psql -U mawr -d nlstore

# –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
status:
	@echo "=== –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ==="
	docker-compose -f docker-compose.infrastructure.yml ps
	@echo "=== –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ==="
	docker-compose -f docker-compose.dev.yml ps

.PHONY: infra-up infra-down dev-up dev-down dev-restart prod-up dev-logs db-connect status

----
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
–ö–æ–º–∞–Ω–¥–∞	–û–ø–∏—Å–∞–Ω–∏–µ
make infra-up	–ó–∞–ø—É—Å–∫ –ë–î –∏ pgAdmin
make dev-up	–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
make dev-restart	–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
make dev-logs	–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
make infra-down	–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
make status	–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

========================================

=== bot\.env ===

#bot/.env
BOT_TOKEN=${BOT_TOKEN}
CHANNEL_ID=${CHANNEL_ID}
PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
CHECK_INTERVAL=${CHECK_INTERVAL}
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_NAME=${POSTGRES_DB}
DB_USER=${POSTGRES_USER}
DB_PASSWORD=${POSTGRES_PASSWORD}

========================================

=== bot\src\text_utils.py ===

import re
import html

def clean_telegram_html(text: str) -> str:
    return re.sub(r"</?think>", "", text)

def convert_markdown_links_to_html(text: str) -> str:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–æ—Å–æ–∫ –≤–∏–¥–∞ [1], [2] —Å —Å—Å—ã–ª–∫–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ
    footnote_refs = {}
    
    # –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–Ω–æ—Å–∫–∏ –≤–∏–¥–∞ [1]: URL
    def collect_footnotes(match):
        num = match.group(1)
        url = match.group(2)
        footnote_refs[num] = url
        return ""  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–Ω–æ—Å–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    text = re.sub(r'^\[(\d+)\]:\s*(\S+)$', collect_footnotes, text, flags=re.MULTILINE)
    
    # –®–∞–≥ 2: –ó–∞–º–µ–Ω—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è [1] –Ω–∞ —Å—Å—ã–ª–∫–∏
    if footnote_refs:
        def replace_footnote(match):
            num = match.group(1)
            url = footnote_refs.get(num)
            if url:
                return f'<a href="{html.escape(url, quote=True)}">[{num}]</a>'
            return match.group(0)
        
        text = re.sub(r'\[(\d+)\]', replace_footnote, text)
    
    # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö Markdown —Å—Å—ã–ª–æ–∫
    def replace_link(match):
        return f'<a href="{html.escape(match.group(2), quote=True)}">{html.escape(match.group(1))}</a>'
    
    return re.sub(r'\[([^\]]+)\]\(([^)]+)\)', replace_link, text)

========================================

=== bot\src\config.py ===

# bot/src/config.py
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")



========================================

=== bot\src\telegram_utils.py ===

import logging
from aiogram import Bot

logger = logging.getLogger(__name__)

async def send_long_message(bot: Bot, chat_id: int, text: str, parse_mode=None, **kwargs):
    limit = 4096
    for i in range(0, len(text), limit):
        part = text[i:i+limit]
        await bot.send_message(chat_id, part, parse_mode=parse_mode, **kwargs)

========================================

=== bot\src\bot.py ===

import os
import asyncio
import logging
from perplexity import init_perplexity, ask_perplexity
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.exceptions import TelegramBadRequest

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (—É–±—Ä–∞–Ω—ã —Ç–æ—á–∫–∏)
from state_utils import load_state, save_state, load_pinned_message_id, save_pinned_message_id
from scraper import fetch_products
from perplexity import ask_perplexity, init_perplexity
from telegram_utils import send_long_message
from text_utils import clean_telegram_html, convert_markdown_links_to_html

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "18000"))



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Perplexity API
if PERPLEXITY_API_KEY:
    init_perplexity(PERPLEXITY_API_KEY)
    answer = ask_perplexity("–ö–∞–∫–∞—è –ø–æ–ª—å–∑–∞ —É –∫–æ–ª–ª–∞–≥–µ–Ω–∞?")
    
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
router = Router()


@router.channel_post()
async def channel_post_handler(message: types.Message):
    if not PERPLEXITY_API_KEY:
        await message.reply("Perplexity API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    user_query = message.text
    if not user_query:
        return

    try:
        mention = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>' if message.from_user else None

        await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {user_query[:50]}...")
        
        loop = asyncio.get_event_loop()
        raw_answer = await loop.run_in_executor(None, ask_perplexity, user_query)
        
        cleaned_answer = clean_telegram_html(raw_answer)
        answer_with_links = convert_markdown_links_to_html(cleaned_answer)

        reply_text = f"{mention}, {answer_with_links}" if mention else answer_with_links
 
        await send_long_message(
            bot=message.bot,
            chat_id=message.chat.id,
            text=reply_text,
            parse_mode="HTML",  # –í–∞–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-–ø–∞—Ä—Å–∏–Ω–≥
            disable_web_page_preview=True
        )
        logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

async def price_scraping_loop(bot: Bot):
    await asyncio.sleep(10)
    logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω")
    
    while True:
        try:
            products = fetch_products()
            old_state = load_state()
            pinned_message_id = load_pinned_message_id()
            new_state = {}
            price_drop_messages = []
            price_increase_detected = False

            for product in products:
                try:
                    product_id = str(product.get('id', ''))
                    product_name = str(product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                    new_price = product.get('price', 0)
                    if isinstance(new_price, dict):
                        new_price = new_price.get('current', 0)
                    new_price = float(new_price)
                    
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    if product_id not in old_state:
                        new_state[product_id] = {
                            'price': new_price,
                            'last_notified_price': new_price
                        }
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    state_data = old_state.get(product_id, {})
                    old_price = float(state_data.get('price', new_price))
                    last_notified = float(state_data.get('last_notified_price', old_price))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    new_state[product_id] = {
                        'price': new_price,
                        'last_notified_price': last_notified
                    }

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    if new_price < old_price and new_price != last_notified:
                        msg = f"üìâ –¶–µ–Ω–∞ –Ω–∞ '{product_name}' —Å–Ω–∏–∑–∏–ª–∞—Å—å: {old_price} ‚ÇΩ ‚Üí {new_price} ‚ÇΩ"
                        price_drop_messages.append(msg)
                        new_state[product_id]['last_notified_price'] = new_price
                    elif new_price > old_price:
                        price_increase_detected = True
                        new_state[product_id]['last_notified_price'] = new_price

                except (KeyError, ValueError, TypeError) as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä: {e}")

            if price_drop_messages:
                full_message = "üî• **–ê–ö–¶–ò–Ø!**\n\n" + "\n".join(price_drop_messages)
                sent_message = await bot.send_message(CHANNEL_ID, full_message, parse_mode="Markdown")
                await bot.pin_chat_message(CHANNEL_ID, sent_message.message_id)
                save_pinned_message_id(sent_message.message_id)
            elif price_increase_detected and pinned_message_id:
                await bot.unpin_chat_message(CHANNEL_ID, pinned_message_id)
                save_pinned_message_id(None)

            save_state(new_state)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(price_drop_messages)}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω: {e}")

        await asyncio.sleep(CHECK_INTERVAL)
        
@router.message(Command("stats"))
async def send_stats(message: types.Message):
    try:
        stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
        stats += f"‚Ä¢ –î–æ—Å—Ç—É–ø –≤ pgAdmin: http://localhost:6432\n"
        stats += f"  –õ–æ–≥–∏–Ω: admin@admin.com\n"
        stats += f"  –ü–∞—Ä–æ–ª—å: metallica"
        await message.reply(stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    asyncio.create_task(price_scraping_loop(bot))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

========================================

=== bot\src\state_utils.py ===

import logging
from database import Database 

logger = logging.getLogger(__name__)

def load_state():
    try:
        db = Database.get_instance()
        return db.load_state('price_state')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {}

def save_state(state):
    try:
        db = Database.get_instance()
        db.save_state('price_state', state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def load_pinned_message_id():
    try:
        db = Database.get_instance()
        state = db.load_state('pinned_message')
        return state.get('pinned_message_id')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def save_pinned_message_id(message_id):
    try:
        db = Database.get_instance()
        db.save_state('pinned_message', {'pinned_message_id': message_id})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

========================================

=== bot\src\perplexity.py ===

import requests
import logging
from typing import List, Dict, Optional
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è "–ë–î" –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é) ---
class ProductDatabase:
    def __init__(self):
        self.products = []
    
    def sync_demo_products(self):
        demo_products = [
            {
                "id": 1,
                "name": "–ö–æ–ª–ª–∞–≥–µ–Ω –£–ª—å—Ç—Ä–∞",
                "description": "–ì–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–ª–ª–∞–≥–µ–Ω —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º C",
                "benefits": "–£–ª—É—á—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏, –≤–æ–ª–æ—Å –∏ –Ω–æ–≥—Ç–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å—É—Å—Ç–∞–≤–æ–≤",
                "ingredients": "–ö–æ–ª–ª–∞–≥–µ–Ω –≥–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (10 –≥), –≤–∏—Ç–∞–º–∏–Ω C (80 –º–≥)",
                "usage": "–ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ 1 —Å–∞—à–µ –≤ –¥–µ–Ω—å, —Ä–∞—Å—Ç–≤–æ—Ä–∏–≤ –≤ –≤–æ–¥–µ"
            },
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        ]
        self.products = demo_products
    
    def search_products(self, query: str) -> List[Dict]:
        found = []
        query_l = query.lower()
        for prod in self.products:
            text = (prod['name'] + ' ' + prod['description'] + ' ' + prod['benefits']).lower()
            if query_l in text:
                found.append(prod)
        return found


# --- –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Åc –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Perplexity API ---
class PerplexityAPI:
    BASE_URL = "https://api.perplexity.ai/chat/completions"

    def __init__(self, api_key: str):
        self.api_key = api_key
        self.db = ProductDatabase()
        self.db.sync_demo_products()

    # –î–µ–ª–∞–µ–º retry: 3 –ø–æ–ø—ã—Ç–∫–∏, –ø–∞—É–∑–∞ 3 —Å–µ–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ timeout!
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_fixed(3),
        retry=retry_if_exception_type(requests.exceptions.Timeout)
    )
    def _ask(self, payload, headers):
        response = requests.post(
            self.BASE_URL,
            json=payload,
            headers=headers,
            timeout=12  # —É–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 12 —Å–µ–∫—É–Ω–¥!
        )
        response.raise_for_status()
        return response.json()

    def ask(self, query: str) -> str:
        try:
            relevant = self.db.search_products(query)
            product_context = ""
            if relevant:
                product_context = "\n\n### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö:\n"
                for prod in relevant:
                    product_context += (
                        f"- {prod['name']}: {prod['description']}\n"
                        f"  –ü–æ–ª—å–∑–∞: {prod['benefits']}\n"
                    )
            system_prompt = (
                "–¢—ã - –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥-—ç–∫—Å–ø–µ—Ä—Ç –æ—Ç NL INTERNATIONAL. "
                "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ, –Ω–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤.\n"
                f"{product_context}"
            )
            # –í –º–µ—Ç–æ–¥–µ ask –∫–ª–∞—Å—Å–∞ PerplexityAPI
            user_prompt = (
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                "- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
                "- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º\n"
                "- –î–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Å–Ω–æ—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [1], [2] –≤ —Ç–µ–∫—Å—Ç–µ\n"
                "- –í –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "      [1]: –ø–æ–ª–Ω—ã–π_URL_–∏—Å—Ç–æ—á–Ω–∏–∫–∞\n"
                "      [2]: –ø–æ–ª–Ω—ã–π_URL_–∏—Å—Ç–æ—á–Ω–∏–∫–∞\n"
                "- –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: [NL INTERNATIONAL](https://nlstar.com/ref/aU37in)\n"
                f'–í–æ–ø—Ä–æ—Å: "{query}"'
            )
            payload = {
                "model": "sonar-pro",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                "max_tokens": 1000,
                "temperature": 0.3,
            }
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–æ–º
            resp_json = self._ask(payload, headers)
            return resp_json["choices"][0]["message"]["content"]
        except requests.exceptions.Timeout:
            logger.error("Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Perplexity API.")
            return "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ----
perplexity_api: Optional[PerplexityAPI] = None

def init_perplexity(api_key: str):
    global perplexity_api
    perplexity_api = PerplexityAPI(api_key)
    logger.info("Perplexity API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

def ask_perplexity(query: str) -> str:
    if not perplexity_api:
        return "Perplexity API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ init_perplexity(api_key)."
    return perplexity_api.ask(query)

# --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é) ---
if __name__ == "__main__":
    import os
    API_KEY = os.getenv("PERPLEXITY_API_KEY", "your_api_key_here")
    init_perplexity(API_KEY)
    while True:
        q = input("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏: ")
        print(ask_perplexity(q))


========================================

=== bot\src\scraper.py ===

import requests
import logging
from database import Database

logger = logging.getLogger(__name__)

def fetch_products():
    try:
        url = "https://ng.nlstar.com/ru/api/store/city/2214/all-products/"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
        }
        logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å {url}")
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        products = data.get("products", [])
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        normalized = []
        for p in products:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                price = p.get('price', 0)
                if isinstance(price, dict):
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    price = price.get('current', 0)
                if isinstance(price, str):
                    price = price.replace(' ', '').replace(',', '.')
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
                try:
                    price = float(price)
                except (ValueError, TypeError):
                    price = 0.0
                
                normalized.append({
                    'id': str(p.get('id', '')),
                    'name': str(p.get('name') or p.get('short_name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    'short_name': str(p.get('short_name', '')),
                    'price': price,
                    'category': str(p.get('category', ''))})
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db = Database.get_instance()
        saved = db.save_products(normalized)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î")
        
        return normalized
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return []

========================================

=== bot\src\database.py ===

import psycopg2
import os
import logging
import time
import json

logger = logging.getLogger(__name__)

class Database:
    _instance = None
    
    @classmethod
    def get_instance(cls):
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance
    
    def __init__(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self, retries=10, delay=2):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        for i in range(retries):
            try:
                self.conn = psycopg2.connect(
                    host=os.getenv("DB_HOST", "localhost"),
                    port=os.getenv("DB_PORT", "5432"),
                    dbname=os.getenv("DB_NAME", "nlstore"),
                    user=os.getenv("DB_USER", "mawr"),
                    password=os.getenv("DB_PASSWORD", "metallica"),
                    connect_timeout=10
                )
                self.conn.autocommit = True
                logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –Ω–∞ {os.getenv('DB_HOST', 'localhost')}:{os.getenv('DB_PORT', '5432')}")
                return
            except psycopg2.OperationalError as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}): {e}")
                if i < retries - 1:
                    time.sleep(delay)
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    raise
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
                raise
    
    def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.conn:
            try:
                self.conn.close()
            except:
                pass
        self.connect()
    
    def execute_with_retry(self, query, params=None, retries=3):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        for i in range(retries):
            try:
                with self.conn.cursor() as cursor:
                    cursor.execute(query, params)
                    return cursor.fetchall() if cursor.description else None
            except (psycopg2.OperationalError, psycopg2.InterfaceError) as e:
                logger.warning(f"–ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({i+1}/{retries}): {e}")
                if i < retries - 1:
                    try:
                        self.reconnect()
                    except Exception as reconnect_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {reconnect_error}")
                        time.sleep(2)
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î")
                    raise
    
    def create_tables(self):
        if not self.conn:
            logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
            return
            
        try:
            self.execute_with_retry("""
                CREATE TABLE IF NOT EXISTS products (
                    id VARCHAR(50) PRIMARY KEY,
                    name TEXT NOT NULL,
                    short_name TEXT,
                    price FLOAT NOT NULL,
                    category TEXT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            self.execute_with_retry("""
                CREATE TABLE IF NOT EXISTS price_history (
                    id SERIAL PRIMARY KEY,
                    product_id VARCHAR(50) NOT NULL,
                    price FLOAT NOT NULL,
                    recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            self.execute_with_retry("""
                CREATE TABLE IF NOT EXISTS bot_state (
                    key VARCHAR(50) PRIMARY KEY,
                    value JSONB NOT NULL
                )
            """)
            
            logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def save_products(self, products):
        if not self.conn or not products:
            return 0
            
        saved_count = 0
        try:
            for product in products:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    product_id = str(product.get('id', ''))
                    name = str(product.get('name', ''))
                    short_name = str(product.get('short_name', ''))
                    price = float(product.get('price', 0))
                    category = str(product.get('category', ''))
                    
                    self.execute_with_retry("""
                        INSERT INTO products (id, name, short_name, price, category)
                        VALUES (%s, %s, %s, %s, %s)
                        ON CONFLICT (id) DO UPDATE SET
                            name = EXCLUDED.name,
                            short_name = EXCLUDED.short_name,
                            price = EXCLUDED.price,
                            category = EXCLUDED.category,
                            updated_at = CURRENT_TIMESTAMP
                    """, (product_id, name, short_name, price, category))
                    
                    self.execute_with_retry("""
                        INSERT INTO price_history (product_id, price)
                        VALUES (%s, %s)
                    """, (product_id, price))
                    
                    saved_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id')}: {e}")
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        
        return saved_count
    
    def save_state(self, key, state):
        if not self.conn:
            return
            
        try:
            self.execute_with_retry("""
                INSERT INTO bot_state (key, value)
                VALUES (%s, %s)
                ON CONFLICT (key) DO UPDATE SET
                    value = EXCLUDED.value
            """, (key, json.dumps(state)))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_state(self, key):
        if not self.conn:
            return {}
            
        try:
            result = self.execute_with_retry("SELECT value FROM bot_state WHERE key = %s", (key,))
            return json.loads(result[0][0]) if result else {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return {}


========================================

=== bot\src\postgres_db.py ===

import psycopg2
from psycopg2 import sql
from psycopg2.extras import DictCursor
import os
import logging
import time
import json

logger = logging.getLogger(__name__)

class PostgresDB:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(PostgresDB, cls).__new__(cls)
            cls._instance._init_db()
        return cls._instance
    
    def _init_db(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self, retries=5, delay=3):
        for i in range(retries):
            try:
                self.conn = psycopg2.connect(
                    host=os.getenv("DB_HOST", "db"),
                    port=os.getenv("DB_PORT", "5432"),
                    dbname=os.getenv("DB_NAME", "nlstore"),
                    user=os.getenv("DB_USER", "mawr"),
                    password=os.getenv("DB_PASSWORD", "metallica")
                )
                self.conn.autocommit = True
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}): {e}")
                if i < retries - 1:
                    time.sleep(delay)
        
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    def create_tables(self):
        try:
            with self.conn.cursor() as cursor:
                # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS products (
                        id VARCHAR(50) PRIMARY KEY,
                        name TEXT NOT NULL,
                        short_name TEXT,
                        price FLOAT NOT NULL,
                        category TEXT,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS price_history (
                        id SERIAL PRIMARY KEY,
                        product_id VARCHAR(50) NOT NULL,
                        price FLOAT NOT NULL,
                        recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS bot_state (
                        key VARCHAR(50) PRIMARY KEY,
                        value JSONB NOT NULL
                    )
                """)
                
                logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

    def save_products(self, products):
        if not products:
            logger.warning("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î...")
        saved_count = 0
        
        try:
            with self.conn.cursor() as cursor:
                for product in products:
                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                        cursor.execute("""
                            INSERT INTO products (id, name, short_name, price, category)
                            VALUES (%s, %s, %s, %s, %s)
                            ON CONFLICT (id) DO UPDATE SET
                                name = EXCLUDED.name,
                                short_name = EXCLUDED.short_name,
                                price = EXCLUDED.price,
                                category = EXCLUDED.category,
                                updated_at = CURRENT_TIMESTAMP
                        """, (
                            product['id'],
                            product.get('name', ''),
                            product.get('short_name', ''),
                            product['price'],
                            product.get('category', '')
                        ))
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                        cursor.execute("""
                            INSERT INTO price_history (product_id, price)
                            VALUES (%s, %s)
                        """, (
                            product['id'],
                            product['price']
                        ))
                        
                        saved_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id')}: {e}")
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤")
            return saved_count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return 0

========================================

=== bot\Dockerfile ===

FROM python:3.11-slim

WORKDIR /app

RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY src/ ./src

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è src
WORKDIR /app/src

CMD ["python", "-u", "bot.py"]

========================================

=== bot\requirements.txt ===

aiogram==3.4.1
python-dotenv==1.0.1
requests==2.32.0
beautifulsoup4==4.12.3
psycopg2-binary==2.9.9
tenacity


========================================

=== .env ===

# .env
BOT_TOKEN=8159036536:AAGl_OcC5cjpeZ71t9-ZMusl0eK3t33mSlg
CHANNEL_ID=@telo_v_poryadke_nlstar
LOG_LEVEL=INFO
X_AUTH_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiIxNzJlMWQyNi0zYjRhLTQxODMtODk4My1hOTI3NTMzZDkwNGUiLCJpbmJveF9pZCI6MTB9.epnRyvUy1pb2q9bRr-2dhPtpAeLF-G1Ob_xa8mC6g9A
CHECK_INTERVAL=18000
PERPLEXITY_API_KEY=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
DB_HOST=db
DB_PORT=5432
PGADMIN_PORT=6432

# PostgreSQL
POSTGRES_USER=mawr
POSTGRES_PASSWORD=metallica
POSTGRES_DB=nlstore

# pgAdmin
PGADMIN_DEFAULT_EMAIL=admin@admin.com
PGADMIN_DEFAULT_PASSWORD=metallica


========================================

=== pgadmin\setup.sh ===

#!/bin/bash

# –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ pgAdmin
while ! curl -s http://localhost:80 > /dev/null; do
  echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ pgAdmin..."
  sleep 5
done

# –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
curl -v -X POST "http://localhost:80/browser/server/create" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "NL Store DB",
    "host": "db",
    "port": 5432,
    "username": "'"$POSTGRES_USER"'",
    "password": "'"$POSTGRES_PASSWORD"'",
    "db": "'"$POSTGRES_DB"'",
    "sslmode": "prefer"
  }'

echo "–°–µ—Ä–≤–µ—Ä NL Store DB —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ pgAdmin"

========================================

=== docker-compose.yml ===

version: '3.8'

services:
  bot:
    build: ./bot
    env_file: 
      - ./.env
      - ./bot/.env
    working_dir: /app/src  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ–ø–µ—Ä—å –≤ src
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15
    env_file: ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    env_file: ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  pgadmin_data:

========================================

=== docker-compose.dev.yml ===

version: '3.8'

services:
  bot:
    build: ./bot
    env_file: 
      - ./.env
      - ./bot/.env
    working_dir: /app/src
    environment:
      - DB_HOST=localhost
    network_mode: "host"
    restart: unless-stopped
    depends_on: []


========================================

=== .gitignore ===

# Data files
*.json
*.db
*.csv
.*

# Environment
.env
venv/
bot/.env

# Docker
data/

========================================

=== .env.dev ===

# .env
BOT_TOKEN=8159036536:AAGl_OcC5cjpeZ71t9-ZMusl0eK3t33mSlg
CHANNEL_ID=@telo_v_poryadke_nlstar
LOG_LEVEL=INFO
X_AUTH_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiIxNzJlMWQyNi0zYjRhLTQxODMtODk4My1hOTI3NTMzZDkwNGUiLCJpbmJveF9pZCI6MTB9.epnRyvUy1pb2q9bRr-2dhPtpAeLF-G1Ob_xa8mC6g9A
CHECK_INTERVAL=18000
PERPLEXITY_API_KEY=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

# Database settings for development (localhost)
DB_HOST=localhost
DB_PORT=5432
PGADMIN_PORT=6432

# PostgreSQL
POSTGRES_USER=mawr
POSTGRES_PASSWORD=metallica
POSTGRES_DB=nlstore

# pgAdmin
PGADMIN_DEFAULT_EMAIL=admin@admin.com
PGADMIN_DEFAULT_PASSWORD=metallica


========================================

=== Makefile ===

# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ë–î + pgAdmin)
infra-up:
	docker-compose -f docker-compose.infrastructure.yml up -d

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
infra-down:
	docker-compose -f docker-compose.infrastructure.yml down -v

# –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –±–æ—Ç)
dev-up:
	docker-compose -f docker-compose.dev.yml up --build -d

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-down:
	docker-compose -f docker-compose.dev.yml down

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞
dev-restart:
	docker-compose -f docker-compose.dev.yml down
	docker-compose -f docker-compose.dev.yml up --build -d

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
prod-up:
	docker-compose -f docker-compose.prod.yml up -d

# –õ–æ–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-logs:
	docker-compose -f docker-compose.dev.yml logs -f

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db-connect:
	docker exec -it $$(docker ps -q -f "name=db") psql -U mawr -d nlstore

# –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
status:
	@echo "=== –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ==="
	docker-compose -f docker-compose.infrastructure.yml ps
	@echo "=== –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ==="
	docker-compose -f docker-compose.dev.yml ps

.PHONY: infra-up infra-down dev-up dev-down dev-restart prod-up dev-logs db-connect status


========================================

=== project-export.txt ===

PROJECT EXPORT

PROJECT STRUCTURE:

üìÅ bot
  üìÅ src
    üìÑ bot.py
    üìÑ config.py
    üìÑ database.py
    üìÑ perplexity.py
    üìÑ postgres_db.py
    üìÑ scraper.py
    üìÑ state_utils.py
    üìÑ telegram_utils.py
    üìÑ text_utils.py
  üìÑ .env
  üìÑ Dockerfile
  üìÑ requirements.txt
üìÅ data
üìÅ logs
üìÅ pgadmin
  üìÑ setup.sh
üìÑ .env
üìÑ .env.dev
üìÑ .gitignore
üìÑ dev.sh
üìÑ docker-compose.dev.yml
üìÑ docker-compose.infrastructure.yml
üìÑ docker-compose.yml
üìÑ Makefile
üìÑ project-export.txt
üìÑ README.md

FILES:

=== dev.sh ===

#!/bin/bash
# dev.sh - —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

case "$1" in
    "start")
        echo "–ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
        docker-compose -f docker-compose.infrastructure.yml up -d
        echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ë–î..."
        sleep 10
        echo "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
        docker-compose -f docker-compose.dev.yml up --build
        ;;
    "stop")
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
        docker-compose -f docker-compose.dev.yml down
        ;;
    "restart")
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
        docker-compose -f docker-compose.dev.yml down
        docker-compose -f docker-compose.dev.yml up --build
        ;;
    "infra-stop")
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
        docker-compose -f docker-compose.infrastructure.yml down
        ;;
    "logs")
        docker-compose -f docker-compose.dev.yml logs -f
        ;;
    "status")
        echo "=== –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ==="
        docker-compose -f docker-compose.infrastructure.yml ps
        echo "=== –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ==="
        docker-compose -f docker-compose.dev.yml ps
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|infra-stop|logs|status}"
        echo ""
        echo "start       - –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –±–æ—Ç–∞"
        echo "stop        - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞"
        echo "restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞"
        echo "infra-stop  - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
        echo "logs        - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –±–æ—Ç–∞"
        echo "status      - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        exit 1
        ;;
esac


========================================

=== README.md ===

##Settings for connect
Host name/address: db
Port: 5432
Maintenance database: nlstore
Username: {your_username}
Password: {your_pass}


#work with db throw query service:
#check catalog
SELECT datname FROM pg_catalog.pg_database WHERE datistemplate = false;

#check tables
SELECT tablename FROM pg_tables WHERE schemaname = 'public';

----
# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º (—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª Makefile –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º)

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ë–î + pgAdmin)
infra-up:
	docker-compose -f docker-compose.infrastructure.yml up -d

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
infra-down:
	docker-compose -f docker-compose.infrastructure.yml down

# –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –±–æ—Ç)
dev-up:
	docker-compose -f docker-compose.dev.yml up --build

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-down:
	docker-compose -f docker-compose.dev.yml down

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞
dev-restart:
	docker-compose -f docker-compose.dev.yml down
	docker-compose -f docker-compose.dev.yml up --build

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
prod-up:
	docker-compose -f docker-compose.prod.yml up -d

# –õ–æ–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-logs:
	docker-compose -f docker-compose.dev.yml logs -f

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db-connect:
	docker exec -it $$(docker ps -q -f "name=db") psql -U mawr -d nlstore

# –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
status:
	@echo "=== –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ==="
	docker-compose -f docker-compose.infrastructure.yml ps
	@echo "=== –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ==="
	docker-compose -f docker-compose.dev.yml ps

.PHONY: infra-up infra-down dev-up dev-down dev-restart prod-up dev-logs db-connect status

----
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
–ö–æ–º–∞–Ω–¥–∞	–û–ø–∏—Å–∞–Ω–∏–µ
make infra-up	–ó–∞–ø—É—Å–∫ –ë–î –∏ pgAdmin
make dev-up	–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
make dev-restart	–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
make dev-logs	–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
make infra-down	–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
make status	–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

========================================

=== bot\.env ===

#bot/.env
BOT_TOKEN=${BOT_TOKEN}
CHANNEL_ID=${CHANNEL_ID}
PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
CHECK_INTERVAL=${CHECK_INTERVAL}
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_NAME=${POSTGRES_DB}
DB_USER=${POSTGRES_USER}
DB_PASSWORD=${POSTGRES_PASSWORD}

========================================

=== bot\src\text_utils.py ===

import re
import html

def clean_telegram_html(text: str) -> str:
    return re.sub(r"</?think>", "", text)

def convert_markdown_links_to_html(text: str) -> str:
    def replace_link(match):
        return f'<a href="{html.escape(match.group(2), quote=True)}">{html.escape(match.group(1))}</a>'
    return re.sub(r'\[([^\]]+)\]\(([^)]+)\)', replace_link, text)

========================================

=== bot\src\config.py ===

# bot/src/config.py
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")



========================================

=== bot\src\telegram_utils.py ===

import logging
from aiogram import Bot

logger = logging.getLogger(__name__)

async def send_long_message(bot: Bot, chat_id: int, text: str, parse_mode=None, **kwargs):
    limit = 4096
    for i in range(0, len(text), limit):
        part = text[i:i+limit]
        await bot.send_message(chat_id, part, parse_mode=parse_mode, **kwargs)

========================================

=== bot\src\bot.py ===

import os
import asyncio
import logging
from perplexity import init_perplexity, ask_perplexity
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.exceptions import TelegramBadRequest

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (—É–±—Ä–∞–Ω—ã —Ç–æ—á–∫–∏)
from state_utils import load_state, save_state, load_pinned_message_id, save_pinned_message_id
from scraper import fetch_products
from perplexity import ask_perplexity, init_perplexity
from telegram_utils import send_long_message
from text_utils import clean_telegram_html, convert_markdown_links_to_html

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "18000"))



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Perplexity API
if PERPLEXITY_API_KEY:
    init_perplexity(PERPLEXITY_API_KEY)
    answer = ask_perplexity("–ö–∞–∫–∞—è –ø–æ–ª—å–∑–∞ —É –∫–æ–ª–ª–∞–≥–µ–Ω–∞?")
    
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
router = Router()


@router.channel_post()
async def channel_post_handler(message: types.Message):
    if not PERPLEXITY_API_KEY:
        await message.reply("Perplexity API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    user_query = message.text
    if not user_query:
        return

    try:
        mention = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>' if message.from_user else None

        await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {user_query[:50]}...")
        
        loop = asyncio.get_event_loop()
        raw_answer = await loop.run_in_executor(None, ask_perplexity, user_query)
        
        cleaned_answer = clean_telegram_html(raw_answer)
        answer_with_links = convert_markdown_links_to_html(cleaned_answer)

        reply_text = f"{mention}, {answer_with_links}" if mention else answer_with_links

        await send_long_message(
            bot=message.bot,
            chat_id=message.chat.id,
            text=answer_with_links,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

async def price_scraping_loop(bot: Bot):
    await asyncio.sleep(10)
    logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω")
    
    while True:
        try:
            products = fetch_products()
            old_state = load_state()
            pinned_message_id = load_pinned_message_id()
            new_state = {}
            price_drop_messages = []
            price_increase_detected = False

            for product in products:
                try:
                    product_id = str(product.get('id', ''))
                    product_name = str(product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                    new_price = product.get('price', 0)
                    if isinstance(new_price, dict):
                        new_price = new_price.get('current', 0)
                    new_price = float(new_price)
                    
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    if product_id not in old_state:
                        new_state[product_id] = {
                            'price': new_price,
                            'last_notified_price': new_price
                        }
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    state_data = old_state.get(product_id, {})
                    old_price = float(state_data.get('price', new_price))
                    last_notified = float(state_data.get('last_notified_price', old_price))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    new_state[product_id] = {
                        'price': new_price,
                        'last_notified_price': last_notified
                    }

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    if new_price < old_price and new_price != last_notified:
                        msg = f"üìâ –¶–µ–Ω–∞ –Ω–∞ '{product_name}' —Å–Ω–∏–∑–∏–ª–∞—Å—å: {old_price} ‚ÇΩ ‚Üí {new_price} ‚ÇΩ"
                        price_drop_messages.append(msg)
                        new_state[product_id]['last_notified_price'] = new_price
                    elif new_price > old_price:
                        price_increase_detected = True
                        new_state[product_id]['last_notified_price'] = new_price

                except (KeyError, ValueError, TypeError) as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä: {e}")

            if price_drop_messages:
                full_message = "üî• **–ê–ö–¶–ò–Ø!**\n\n" + "\n".join(price_drop_messages)
                sent_message = await bot.send_message(CHANNEL_ID, full_message, parse_mode="Markdown")
                await bot.pin_chat_message(CHANNEL_ID, sent_message.message_id)
                save_pinned_message_id(sent_message.message_id)
            elif price_increase_detected and pinned_message_id:
                await bot.unpin_chat_message(CHANNEL_ID, pinned_message_id)
                save_pinned_message_id(None)

            save_state(new_state)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(price_drop_messages)}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω: {e}")

        await asyncio.sleep(CHECK_INTERVAL)
        
@router.message(Command("stats"))
async def send_stats(message: types.Message):
    try:
        stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
        stats += f"‚Ä¢ –î–æ—Å—Ç—É–ø –≤ pgAdmin: http://localhost:6432\n"
        stats += f"  –õ–æ–≥–∏–Ω: admin@admin.com\n"
        stats += f"  –ü–∞—Ä–æ–ª—å: metallica"
        await message.reply(stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    asyncio.create_task(price_scraping_loop(bot))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

========================================

=== bot\src\state_utils.py ===

import logging
from database import Database 

logger = logging.getLogger(__name__)

def load_state():
    try:
        db = Database.get_instance()
        return db.load_state('price_state')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {}

def save_state(state):
    try:
        db = Database.get_instance()
        db.save_state('price_state', state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def load_pinned_message_id():
    try:
        db = Database.get_instance()
        state = db.load_state('pinned_message')
        return state.get('pinned_message_id')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def save_pinned_message_id(message_id):
    try:
        db = Database.get_instance()
        db.save_state('pinned_message', {'pinned_message_id': message_id})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

========================================

=== bot\src\perplexity.py ===

import requests
import logging
from typing import List, Dict, Optional
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è "–ë–î" –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é) ---
class ProductDatabase:
    def __init__(self):
        self.products = []
    
    def sync_demo_products(self):
        demo_products = [
            {
                "id": 1,
                "name": "–ö–æ–ª–ª–∞–≥–µ–Ω –£–ª—å—Ç—Ä–∞",
                "description": "–ì–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–ª–ª–∞–≥–µ–Ω —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º C",
                "benefits": "–£–ª—É—á—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏, –≤–æ–ª–æ—Å –∏ –Ω–æ–≥—Ç–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å—É—Å—Ç–∞–≤–æ–≤",
                "ingredients": "–ö–æ–ª–ª–∞–≥–µ–Ω –≥–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (10 –≥), –≤–∏—Ç–∞–º–∏–Ω C (80 –º–≥)",
                "usage": "–ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ 1 —Å–∞—à–µ –≤ –¥–µ–Ω—å, —Ä–∞—Å—Ç–≤–æ—Ä–∏–≤ –≤ –≤–æ–¥–µ"
            },
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        ]
        self.products = demo_products
    
    def search_products(self, query: str) -> List[Dict]:
        found = []
        query_l = query.lower()
        for prod in self.products:
            text = (prod['name'] + ' ' + prod['description'] + ' ' + prod['benefits']).lower()
            if query_l in text:
                found.append(prod)
        return found


# --- –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Åc –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Perplexity API ---
class PerplexityAPI:
    BASE_URL = "https://api.perplexity.ai/chat/completions"

    def __init__(self, api_key: str):
        self.api_key = api_key
        self.db = ProductDatabase()
        self.db.sync_demo_products()

    # –î–µ–ª–∞–µ–º retry: 3 –ø–æ–ø—ã—Ç–∫–∏, –ø–∞—É–∑–∞ 3 —Å–µ–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ timeout!
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_fixed(3),
        retry=retry_if_exception_type(requests.exceptions.Timeout)
    )
    def _ask(self, payload, headers):
        response = requests.post(
            self.BASE_URL,
            json=payload,
            headers=headers,
            timeout=12  # —É–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 12 —Å–µ–∫—É–Ω–¥!
        )
        response.raise_for_status()
        return response.json()

    def ask(self, query: str) -> str:
        try:
            relevant = self.db.search_products(query)
            product_context = ""
            if relevant:
                product_context = "\n\n### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö:\n"
                for prod in relevant:
                    product_context += (
                        f"- {prod['name']}: {prod['description']}\n"
                        f"  –ü–æ–ª—å–∑–∞: {prod['benefits']}\n"
                    )
            system_prompt = (
                "–¢—ã - –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥-—ç–∫—Å–ø–µ—Ä—Ç –æ—Ç NL INTERNATIONAL. "
                "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ, –Ω–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤.\n"
                f"{product_context}"
            )
            user_prompt = (
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                "- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
                "- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º\n"
                "- –ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Å—Å—ã–ª–æ–∫\n"
                "- –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: [NL INTERNATIONAL](https://nlstar.com)\n"
                "- –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n\n"
                f'–í–æ–ø—Ä–æ—Å: "{query}"'
            )
            payload = {
                "model": "sonar-pro",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                "max_tokens": 1000,
                "temperature": 0.3,
            }
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–æ–º
            resp_json = self._ask(payload, headers)
            return resp_json["choices"][0]["message"]["content"]
        except requests.exceptions.Timeout:
            logger.error("Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Perplexity API.")
            return "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ----
perplexity_api: Optional[PerplexityAPI] = None

def init_perplexity(api_key: str):
    global perplexity_api
    perplexity_api = PerplexityAPI(api_key)
    logger.info("Perplexity API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

def ask_perplexity(query: str) -> str:
    if not perplexity_api:
        return "Perplexity API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ init_perplexity(api_key)."
    return perplexity_api.ask(query)

# --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é) ---
if __name__ == "__main__":
    import os
    API_KEY = os.getenv("PERPLEXITY_API_KEY", "your_api_key_here")
    init_perplexity(API_KEY)
    while True:
        q = input("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏: ")
        print(ask_perplexity(q))


========================================

=== bot\src\scraper.py ===

import requests
import logging
from database import Database

logger = logging.getLogger(__name__)

def fetch_products():
    try:
        url = "https://ng.nlstar.com/ru/api/store/city/2214/all-products/"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
        }
        logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å {url}")
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        products = data.get("products", [])
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        normalized = []
        for p in products:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                price = p.get('price', 0)
                if isinstance(price, dict):
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    price = price.get('current', 0)
                if isinstance(price, str):
                    price = price.replace(' ', '').replace(',', '.')
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
                try:
                    price = float(price)
                except (ValueError, TypeError):
                    price = 0.0
                
                normalized.append({
                    'id': str(p.get('id', '')),
                    'name': str(p.get('name') or p.get('short_name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    'short_name': str(p.get('short_name', '')),
                    'price': price,
                    'category': str(p.get('category', ''))})
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db = Database.get_instance()
        saved = db.save_products(normalized)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î")
        
        return normalized
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return []

========================================

=== bot\src\database.py ===

import psycopg2
import os
import logging
import time
import json

logger = logging.getLogger(__name__)

class Database:
    _instance = None
    
    @classmethod
    def get_instance(cls):
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance
    
    def __init__(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self, retries=10, delay=2):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        for i in range(retries):
            try:
                self.conn = psycopg2.connect(
                    host=os.getenv("DB_HOST", "localhost"),
                    port=os.getenv("DB_PORT", "5432"),
                    dbname=os.getenv("DB_NAME", "nlstore"),
                    user=os.getenv("DB_USER", "mawr"),
                    password=os.getenv("DB_PASSWORD", "metallica"),
                    connect_timeout=10
                )
                self.conn.autocommit = True
                logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –Ω–∞ {os.getenv('DB_HOST', 'localhost')}:{os.getenv('DB_PORT', '5432')}")
                return
            except psycopg2.OperationalError as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}): {e}")
                if i < retries - 1:
                    time.sleep(delay)
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    raise
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
                raise
    
    def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.conn:
            try:
                self.conn.close()
            except:
                pass
        self.connect()
    
    def execute_with_retry(self, query, params=None, retries=3):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        for i in range(retries):
            try:
                with self.conn.cursor() as cursor:
                    cursor.execute(query, params)
                    return cursor.fetchall() if cursor.description else None
            except (psycopg2.OperationalError, psycopg2.InterfaceError) as e:
                logger.warning(f"–ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({i+1}/{retries}): {e}")
                if i < retries - 1:
                    try:
                        self.reconnect()
                    except Exception as reconnect_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {reconnect_error}")
                        time.sleep(2)
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î")
                    raise
    
    def create_tables(self):
        if not self.conn:
            logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
            return
            
        try:
            self.execute_with_retry("""
                CREATE TABLE IF NOT EXISTS products (
                    id VARCHAR(50) PRIMARY KEY,
                    name TEXT NOT NULL,
                    short_name TEXT,
                    price FLOAT NOT NULL,
                    category TEXT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            self.execute_with_retry("""
                CREATE TABLE IF NOT EXISTS price_history (
                    id SERIAL PRIMARY KEY,
                    product_id VARCHAR(50) NOT NULL,
                    price FLOAT NOT NULL,
                    recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            self.execute_with_retry("""
                CREATE TABLE IF NOT EXISTS bot_state (
                    key VARCHAR(50) PRIMARY KEY,
                    value JSONB NOT NULL
                )
            """)
            
            logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def save_products(self, products):
        if not self.conn or not products:
            return 0
            
        saved_count = 0
        try:
            for product in products:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    product_id = str(product.get('id', ''))
                    name = str(product.get('name', ''))
                    short_name = str(product.get('short_name', ''))
                    price = float(product.get('price', 0))
                    category = str(product.get('category', ''))
                    
                    self.execute_with_retry("""
                        INSERT INTO products (id, name, short_name, price, category)
                        VALUES (%s, %s, %s, %s, %s)
                        ON CONFLICT (id) DO UPDATE SET
                            name = EXCLUDED.name,
                            short_name = EXCLUDED.short_name,
                            price = EXCLUDED.price,
                            category = EXCLUDED.category,
                            updated_at = CURRENT_TIMESTAMP
                    """, (product_id, name, short_name, price, category))
                    
                    self.execute_with_retry("""
                        INSERT INTO price_history (product_id, price)
                        VALUES (%s, %s)
                    """, (product_id, price))
                    
                    saved_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id')}: {e}")
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        
        return saved_count
    
    def save_state(self, key, state):
        if not self.conn:
            return
            
        try:
            self.execute_with_retry("""
                INSERT INTO bot_state (key, value)
                VALUES (%s, %s)
                ON CONFLICT (key) DO UPDATE SET
                    value = EXCLUDED.value
            """, (key, json.dumps(state)))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_state(self, key):
        if not self.conn:
            return {}
            
        try:
            result = self.execute_with_retry("SELECT value FROM bot_state WHERE key = %s", (key,))
            return json.loads(result[0][0]) if result else {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return {}


========================================

=== bot\src\postgres_db.py ===

import psycopg2
from psycopg2 import sql
from psycopg2.extras import DictCursor
import os
import logging
import time
import json

logger = logging.getLogger(__name__)

class PostgresDB:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(PostgresDB, cls).__new__(cls)
            cls._instance._init_db()
        return cls._instance
    
    def _init_db(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self, retries=5, delay=3):
        for i in range(retries):
            try:
                self.conn = psycopg2.connect(
                    host=os.getenv("DB_HOST", "db"),
                    port=os.getenv("DB_PORT", "5432"),
                    dbname=os.getenv("DB_NAME", "nlstore"),
                    user=os.getenv("DB_USER", "mawr"),
                    password=os.getenv("DB_PASSWORD", "metallica")
                )
                self.conn.autocommit = True
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}): {e}")
                if i < retries - 1:
                    time.sleep(delay)
        
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    def create_tables(self):
        try:
            with self.conn.cursor() as cursor:
                # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS products (
                        id VARCHAR(50) PRIMARY KEY,
                        name TEXT NOT NULL,
                        short_name TEXT,
                        price FLOAT NOT NULL,
                        category TEXT,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS price_history (
                        id SERIAL PRIMARY KEY,
                        product_id VARCHAR(50) NOT NULL,
                        price FLOAT NOT NULL,
                        recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS bot_state (
                        key VARCHAR(50) PRIMARY KEY,
                        value JSONB NOT NULL
                    )
                """)
                
                logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

    def save_products(self, products):
        if not products:
            logger.warning("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î...")
        saved_count = 0
        
        try:
            with self.conn.cursor() as cursor:
                for product in products:
                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                        cursor.execute("""
                            INSERT INTO products (id, name, short_name, price, category)
                            VALUES (%s, %s, %s, %s, %s)
                            ON CONFLICT (id) DO UPDATE SET
                                name = EXCLUDED.name,
                                short_name = EXCLUDED.short_name,
                                price = EXCLUDED.price,
                                category = EXCLUDED.category,
                                updated_at = CURRENT_TIMESTAMP
                        """, (
                            product['id'],
                            product.get('name', ''),
                            product.get('short_name', ''),
                            product['price'],
                            product.get('category', '')
                        ))
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                        cursor.execute("""
                            INSERT INTO price_history (product_id, price)
                            VALUES (%s, %s)
                        """, (
                            product['id'],
                            product['price']
                        ))
                        
                        saved_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id')}: {e}")
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤")
            return saved_count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return 0

========================================

=== bot\Dockerfile ===

FROM python:3.11-slim

WORKDIR /app

RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY src/ ./src

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è src
WORKDIR /app/src

CMD ["python", "-u", "bot.py"]

========================================

=== bot\requirements.txt ===

aiogram==3.4.1
python-dotenv==1.0.1
requests==2.32.0
beautifulsoup4==4.12.3
psycopg2-binary==2.9.9
tenacity


========================================

=== .env ===

# .env
BOT_TOKEN=8159036536:AAGl_OcC5cjpeZ71t9-ZMusl0eK3t33mSlg
CHANNEL_ID=@telo_v_poryadke_nlstar
LOG_LEVEL=INFO
X_AUTH_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiIxNzJlMWQyNi0zYjRhLTQxODMtODk4My1hOTI3NTMzZDkwNGUiLCJpbmJveF9pZCI6MTB9.epnRyvUy1pb2q9bRr-2dhPtpAeLF-G1Ob_xa8mC6g9A
CHECK_INTERVAL=18000
PERPLEXITY_API_KEY=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
DB_HOST=db
DB_PORT=5432
PGADMIN_PORT=6432

# PostgreSQL
POSTGRES_USER=mawr
POSTGRES_PASSWORD=metallica
POSTGRES_DB=nlstore

# pgAdmin
PGADMIN_DEFAULT_EMAIL=admin@admin.com
PGADMIN_DEFAULT_PASSWORD=metallica


========================================

=== pgadmin\setup.sh ===

#!/bin/bash

# –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ pgAdmin
while ! curl -s http://localhost:80 > /dev/null; do
  echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ pgAdmin..."
  sleep 5
done

# –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
curl -v -X POST "http://localhost:80/browser/server/create" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "NL Store DB",
    "host": "db",
    "port": 5432,
    "username": "'"$POSTGRES_USER"'",
    "password": "'"$POSTGRES_PASSWORD"'",
    "db": "'"$POSTGRES_DB"'",
    "sslmode": "prefer"
  }'

echo "–°–µ—Ä–≤–µ—Ä NL Store DB —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ pgAdmin"

========================================

=== docker-compose.yml ===

version: '3.8'

services:
  bot:
    build: ./bot
    env_file: 
      - ./.env
      - ./bot/.env
    working_dir: /app/src  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ–ø–µ—Ä—å –≤ src
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15
    env_file: ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    env_file: ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  pgadmin_data:

========================================

=== docker-compose.dev.yml ===

version: '3.8'

services:
  bot:
    build: ./bot
    env_file: 
      - ./.env
      - ./bot/.env
    working_dir: /app/src
    environment:
      - DB_HOST=localhost
    network_mode: "host"
    restart: unless-stopped
    depends_on: []


========================================

=== .gitignore ===

# Data files
*.json
*.db
*.csv
.*

# Environment
.env
venv/
bot/.env

# Docker
data/

========================================

=== .env.dev ===

# .env
BOT_TOKEN=8159036536:AAGl_OcC5cjpeZ71t9-ZMusl0eK3t33mSlg
CHANNEL_ID=@telo_v_poryadke_nlstar
LOG_LEVEL=INFO
X_AUTH_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiIxNzJlMWQyNi0zYjRhLTQxODMtODk4My1hOTI3NTMzZDkwNGUiLCJpbmJveF9pZCI6MTB9.epnRyvUy1pb2q9bRr-2dhPtpAeLF-G1Ob_xa8mC6g9A
CHECK_INTERVAL=18000
PERPLEXITY_API_KEY=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

# Database settings for development (localhost)
DB_HOST=localhost
DB_PORT=5432
PGADMIN_PORT=6432

# PostgreSQL
POSTGRES_USER=mawr
POSTGRES_PASSWORD=metallica
POSTGRES_DB=nlstore

# pgAdmin
PGADMIN_DEFAULT_EMAIL=admin@admin.com
PGADMIN_DEFAULT_PASSWORD=metallica


========================================

=== Makefile ===

# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ë–î + pgAdmin)
infra-up:
	docker-compose -f docker-compose.infrastructure.yml up -d

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
infra-down:
	docker-compose -f docker-compose.infrastructure.yml down -v

# –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –±–æ—Ç)
dev-up:
	docker-compose -f docker-compose.dev.yml up --build -d

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-down:
	docker-compose -f docker-compose.dev.yml down

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞
dev-restart:
	docker-compose -f docker-compose.dev.yml down
	docker-compose -f docker-compose.dev.yml up --build -d

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
prod-up:
	docker-compose -f docker-compose.prod.yml up -d

# –õ–æ–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-logs:
	docker-compose -f docker-compose.dev.yml logs -f

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db-connect:
	docker exec -it $$(docker ps -q -f "name=db") psql -U mawr -d nlstore

# –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
status:
	@echo "=== –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ==="
	docker-compose -f docker-compose.infrastructure.yml ps
	@echo "=== –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ==="
	docker-compose -f docker-compose.dev.yml ps

.PHONY: infra-up infra-down dev-up dev-down dev-restart prod-up dev-logs db-connect status


========================================

=== project-export.txt ===

PROJECT EXPORT

PROJECT STRUCTURE:

üìÅ bot
  üìÅ src
    üìÑ bot.py
    üìÑ config.py
    üìÑ database.py
    üìÑ perplexity.py
    üìÑ postgres_db.py
    üìÑ scraper.py
    üìÑ state_utils.py
    üìÑ telegram_utils.py
    üìÑ text_utils.py
  üìÑ .env
  üìÑ Dockerfile
  üìÑ requirements.txt
üìÅ data
üìÅ logs
üìÅ pgadmin
  üìÑ setup.sh
üìÑ .env
üìÑ .gitignore
üìÑ docker-compose.yml
üìÑ project-export.txt
üìÑ README.md

FILES:

=== README.md ===

##Settings for connect
Host name/address: db
Port: 5432
Maintenance database: nlstore
Username: {your_username}
Password: {your_pass}


#work with db throw query service:
#check catalog
SELECT datname FROM pg_catalog.pg_database WHERE datistemplate = false;

#check tables
SELECT tablename FROM pg_tables WHERE schemaname = 'public';




========================================

=== bot\.env ===

#bot/.env
BOT_TOKEN=${BOT_TOKEN}
CHANNEL_ID=${CHANNEL_ID}
PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
CHECK_INTERVAL=${CHECK_INTERVAL}
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_NAME=${POSTGRES_DB}
DB_USER=${POSTGRES_USER}
DB_PASSWORD=${POSTGRES_PASSWORD}

========================================

=== bot\src\text_utils.py ===

import re
import html

def clean_telegram_html(text: str) -> str:
    return re.sub(r"</?think>", "", text)

def convert_markdown_links_to_html(text: str) -> str:
    def replace_link(match):
        return f'<a href="{html.escape(match.group(2), quote=True)}">{html.escape(match.group(1))}</a>'
    return re.sub(r'\[([^\]]+)\]\(([^)]+)\)', replace_link, text)

========================================

=== bot\src\config.py ===

# bot/src/config.py
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")



========================================

=== bot\src\telegram_utils.py ===

import logging
from aiogram import Bot

logger = logging.getLogger(__name__)

async def send_long_message(bot: Bot, chat_id: int, text: str, parse_mode=None, **kwargs):
    limit = 4096
    for i in range(0, len(text), limit):
        part = text[i:i+limit]
        await bot.send_message(chat_id, part, parse_mode=parse_mode, **kwargs)

========================================

=== bot\src\bot.py ===

import os
import asyncio
import logging
from perplexity import init_perplexity, ask_perplexity
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.exceptions import TelegramBadRequest

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (—É–±—Ä–∞–Ω—ã —Ç–æ—á–∫–∏)
from state_utils import load_state, save_state, load_pinned_message_id, save_pinned_message_id
from scraper import fetch_products
from perplexity import ask_perplexity, init_perplexity
from telegram_utils import send_long_message
from text_utils import clean_telegram_html, convert_markdown_links_to_html

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "18000"))



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Perplexity API
if PERPLEXITY_API_KEY:
    init_perplexity(PERPLEXITY_API_KEY)
    answer = ask_perplexity("–ö–∞–∫–∞—è –ø–æ–ª—å–∑–∞ —É –∫–æ–ª–ª–∞–≥–µ–Ω–∞?")
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
router = Router()


@router.channel_post()
async def channel_post_handler(message: types.Message):
    if not PERPLEXITY_API_KEY:
        await message.reply("Perplexity API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    user_query = message.text
    if not user_query:
        return

    try:
        mention = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>' if message.from_user else None

        await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {user_query[:50]}...")
        
        loop = asyncio.get_event_loop()
        raw_answer = await loop.run_in_executor(None, ask_perplexity, user_query)
        
        cleaned_answer = clean_telegram_html(raw_answer)
        answer_with_links = convert_markdown_links_to_html(cleaned_answer)

        reply_text = f"{mention}, {answer_with_links}" if mention else answer_with_links

        await send_long_message(
            bot=message.bot,
            chat_id=message.chat.id,
            text=reply_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

async def price_scraping_loop(bot: Bot):
    await asyncio.sleep(10)
    logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω")
    
    while True:
        try:
            products = fetch_products()
            old_state = load_state()
            pinned_message_id = load_pinned_message_id()
            new_state = {}
            price_drop_messages = []
            price_increase_detected = False

            for product in products:
                try:
                    product_id = str(product.get('id', ''))
                    product_name = str(product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                    new_price = product.get('price', 0)
                    if isinstance(new_price, dict):
                        new_price = new_price.get('current', 0)
                    new_price = float(new_price)
                    
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    if product_id not in old_state:
                        new_state[product_id] = {
                            'price': new_price,
                            'last_notified_price': new_price
                        }
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    state_data = old_state.get(product_id, {})
                    old_price = float(state_data.get('price', new_price))
                    last_notified = float(state_data.get('last_notified_price', old_price))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    new_state[product_id] = {
                        'price': new_price,
                        'last_notified_price': last_notified
                    }

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    if new_price < old_price and new_price != last_notified:
                        msg = f"üìâ –¶–µ–Ω–∞ –Ω–∞ '{product_name}' —Å–Ω–∏–∑–∏–ª–∞—Å—å: {old_price} ‚ÇΩ ‚Üí {new_price} ‚ÇΩ"
                        price_drop_messages.append(msg)
                        new_state[product_id]['last_notified_price'] = new_price
                    elif new_price > old_price:
                        price_increase_detected = True
                        new_state[product_id]['last_notified_price'] = new_price

                except (KeyError, ValueError, TypeError) as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä: {e}")

            if price_drop_messages:
                full_message = "üî• **–ê–ö–¶–ò–Ø!**\n\n" + "\n".join(price_drop_messages)
                sent_message = await bot.send_message(CHANNEL_ID, full_message, parse_mode="Markdown")
                await bot.pin_chat_message(CHANNEL_ID, sent_message.message_id)
                save_pinned_message_id(sent_message.message_id)
            elif price_increase_detected and pinned_message_id:
                await bot.unpin_chat_message(CHANNEL_ID, pinned_message_id)
                save_pinned_message_id(None)

            save_state(new_state)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(price_drop_messages)}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω: {e}")

        await asyncio.sleep(CHECK_INTERVAL)
        
@router.message(Command("stats"))
async def send_stats(message: types.Message):
    try:
        stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
        stats += f"‚Ä¢ –î–æ—Å—Ç—É–ø –≤ pgAdmin: http://localhost:6432\n"
        stats += f"  –õ–æ–≥–∏–Ω: admin@admin.com\n"
        stats += f"  –ü–∞—Ä–æ–ª—å: metallica"
        await message.reply(stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    asyncio.create_task(price_scraping_loop(bot))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

========================================

=== bot\src\state_utils.py ===

import logging
from database import Database 

logger = logging.getLogger(__name__)

def load_state():
    try:
        db = Database.get_instance()
        return db.load_state('price_state')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {}

def save_state(state):
    try:
        db = Database.get_instance()
        db.save_state('price_state', state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def load_pinned_message_id():
    try:
        db = Database.get_instance()
        state = db.load_state('pinned_message')
        return state.get('pinned_message_id')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def save_pinned_message_id(message_id):
    try:
        db = Database.get_instance()
        db.save_state('pinned_message', {'pinned_message_id': message_id})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

========================================

=== bot\src\perplexity.py ===

import requests
import logging
from typing import List, Dict, Optional

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è "–ë–î" –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é) ---
class ProductDatabase:
    def __init__(self):
        self.products = []
    
    def sync_demo_products(self):
        demo_products = [
            {
                "id": 1,
                "name": "–ö–æ–ª–ª–∞–≥–µ–Ω –£–ª—å—Ç—Ä–∞",
                "description": "–ì–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–ª–ª–∞–≥–µ–Ω —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º C",
                "benefits": "–£–ª—É—á—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏, –≤–æ–ª–æ—Å –∏ –Ω–æ–≥—Ç–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å—É—Å—Ç–∞–≤–æ–≤",
                "ingredients": "–ö–æ–ª–ª–∞–≥–µ–Ω –≥–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (10 –≥), –≤–∏—Ç–∞–º–∏–Ω C (80 –º–≥)",
                "usage": "–ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ 1 —Å–∞—à–µ –≤ –¥–µ–Ω—å, —Ä–∞—Å—Ç–≤–æ—Ä–∏–≤ –≤ –≤–æ–¥–µ"
            },
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        ]
        self.products = demo_products
    
    def search_products(self, query: str) -> List[Dict]:
        found = []
        query_l = query.lower()
        for prod in self.products:
            text = (prod['name'] + ' ' + prod['description'] + ' ' + prod['benefits']).lower()
            if query_l in text:
                found.append(prod)
        return found


# --- –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Åc –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Perplexity API ---
class PerplexityAPI:
    BASE_URL = "https://api.perplexity.ai/chat/completions"
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.db = ProductDatabase()
        self.db.sync_demo_products()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-—Ç–æ–≤–∞—Ä—ã
    
    def ask(self, query: str) -> str:
        try:
            relevant = self.db.search_products(query)
            product_context = ""
            if relevant:
                product_context = "\n\n### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö:\n"
                for prod in relevant:
                    product_context += (
                        f"- {prod['name']}: {prod['description']}\n"
                        f"  –ü–æ–ª—å–∑–∞: {prod['benefits']}\n"
                    )
            # –§–æ—Ä–º–∏—Ä—É–µ–º ‚Äú–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏‚Äù –¥–ª—è –ò–ò
            system_prompt = (
                "–¢—ã - –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥-—ç–∫—Å–ø–µ—Ä—Ç –æ—Ç NL INTERNATIONAL. "
                "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ, –Ω–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤.\n"
                f"{product_context}"
            )
            user_prompt = (
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                "- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
                "- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º\n"
                "- –ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Å—Å—ã–ª–æ–∫\n"
                "- –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: [NL INTERNATIONAL](https://nlstar.com)\n"
                "- –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n\n"
                f'–í–æ–ø—Ä–æ—Å: "{query}"'
            )
            payload = {
                "model": "sonar-pro",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                "max_tokens": 1000,
                "temperature": 0.3,
            }
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            response = requests.post(
                self.BASE_URL,
                json=payload,
                headers=headers,
                timeout=30
            )
            response.raise_for_status()
            resp_json = response.json()
            return resp_json["choices"][0]["message"]["content"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ----
perplexity_api: Optional[PerplexityAPI] = None

def init_perplexity(api_key: str):
    global perplexity_api
    perplexity_api = PerplexityAPI(api_key)
    logger.info("Perplexity API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

def ask_perplexity(query: str) -> str:
    if not perplexity_api:
        return "Perplexity API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ init_perplexity(api_key)."
    return perplexity_api.ask(query)

# --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é) ---
if __name__ == "__main__":
    import os
    API_KEY = os.getenv("PERPLEXITY_API_KEY", "your_api_key_here")
    init_perplexity(API_KEY)
    while True:
        q = input("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏: ")
        print(ask_perplexity(q))


========================================

=== bot\src\scraper.py ===

import requests
import logging
from database import Database

logger = logging.getLogger(__name__)

def fetch_products():
    try:
        url = "https://ng.nlstar.com/ru/api/store/city/2214/all-products/"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
        }
        logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å {url}")
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        products = data.get("products", [])
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        normalized = []
        for p in products:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                price = p.get('price', 0)
                if isinstance(price, dict):
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    price = price.get('current', 0)
                if isinstance(price, str):
                    price = price.replace(' ', '').replace(',', '.')
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
                try:
                    price = float(price)
                except (ValueError, TypeError):
                    price = 0.0
                
                normalized.append({
                    'id': str(p.get('id', '')),
                    'name': str(p.get('name') or p.get('short_name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    'short_name': str(p.get('short_name', '')),
                    'price': price,
                    'category': str(p.get('category', ''))})
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db = Database.get_instance()
        saved = db.save_products(normalized)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î")
        
        return normalized
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return []

========================================

=== bot\src\database.py ===

import psycopg2
import os
import logging
import time
import json

logger = logging.getLogger(__name__)

class Database:
    _instance = None
    
    @classmethod
    def get_instance(cls):
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance
    
    def __init__(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self, retries=5, delay=3):
        for i in range(retries):
            try:
                self.conn = psycopg2.connect(
                    host=os.getenv("DB_HOST", "db"),
                    port=os.getenv("DB_PORT", "5432"),
                    dbname=os.getenv("DB_NAME", "nlstore"),
                    user=os.getenv("DB_USER", "mawr"),
                    password=os.getenv("DB_PASSWORD", "metallica")
                )
                self.conn.autocommit = True
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}): {e}")
                if i < retries - 1:
                    time.sleep(delay)
        
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
    
    def create_tables(self):
        if not self.conn:
            return
            
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS products (
                        id VARCHAR(50) PRIMARY KEY,
                        name TEXT NOT NULL,
                        short_name TEXT,
                        price FLOAT NOT NULL,
                        category TEXT,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS price_history (
                        id SERIAL PRIMARY KEY,
                        product_id VARCHAR(50) NOT NULL,
                        price FLOAT NOT NULL,
                        recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS bot_state (
                        key VARCHAR(50) PRIMARY KEY,
                        value JSONB NOT NULL
                    )
                """)
                
                logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def save_products(self, products):
        if not self.conn or not products:
            return 0
            
        saved_count = 0
        try:
            with self.conn.cursor() as cursor:
                for product in products:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                        product_id = str(product.get('id', ''))
                        name = str(product.get('name', ''))
                        short_name = str(product.get('short_name', ''))
                        price = float(product.get('price', 0))
                        category = str(product.get('category', ''))
                        
                        cursor.execute("""
                            INSERT INTO products (id, name, short_name, price, category)
                            VALUES (%s, %s, %s, %s, %s)
                            ON CONFLICT (id) DO UPDATE SET
                                name = EXCLUDED.name,
                                short_name = EXCLUDED.short_name,
                                price = EXCLUDED.price,
                                category = EXCLUDED.category,
                                updated_at = CURRENT_TIMESTAMP
                        """, (product_id, name, short_name, price, category))
                        
                        cursor.execute("""
                            INSERT INTO price_history (product_id, price)
                            VALUES (%s, %s)
                        """, (product_id, price))
                        
                        saved_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id')}: {e}")
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        
        return saved_count
    
    def save_state(self, key, state):
        if not self.conn:
            return
            
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO bot_state (key, value)
                    VALUES (%s, %s)
                    ON CONFLICT (key) DO UPDATE SET
                        value = EXCLUDED.value
                """, (key, json.dumps(state)))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_state(self, key):
        if not self.conn:
            return {}
            
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("SELECT value FROM bot_state WHERE key = %s", (key,))
                result = cursor.fetchone()
                return json.loads(result[0]) if result else {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return {}

========================================

=== bot\src\postgres_db.py ===

import psycopg2
from psycopg2 import sql
from psycopg2.extras import DictCursor
import os
import logging
import time
import json

logger = logging.getLogger(__name__)

class PostgresDB:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(PostgresDB, cls).__new__(cls)
            cls._instance._init_db()
        return cls._instance
    
    def _init_db(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self, retries=5, delay=3):
        for i in range(retries):
            try:
                self.conn = psycopg2.connect(
                    host=os.getenv("DB_HOST", "db"),
                    port=os.getenv("DB_PORT", "5432"),
                    dbname=os.getenv("DB_NAME", "nlstore"),
                    user=os.getenv("DB_USER", "mawr"),
                    password=os.getenv("DB_PASSWORD", "metallica")
                )
                self.conn.autocommit = True
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}): {e}")
                if i < retries - 1:
                    time.sleep(delay)
        
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    def create_tables(self):
        try:
            with self.conn.cursor() as cursor:
                # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS products (
                        id VARCHAR(50) PRIMARY KEY,
                        name TEXT NOT NULL,
                        short_name TEXT,
                        price FLOAT NOT NULL,
                        category TEXT,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS price_history (
                        id SERIAL PRIMARY KEY,
                        product_id VARCHAR(50) NOT NULL,
                        price FLOAT NOT NULL,
                        recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS bot_state (
                        key VARCHAR(50) PRIMARY KEY,
                        value JSONB NOT NULL
                    )
                """)
                
                logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

    def save_products(self, products):
        if not products:
            logger.warning("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î...")
        saved_count = 0
        
        try:
            with self.conn.cursor() as cursor:
                for product in products:
                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                        cursor.execute("""
                            INSERT INTO products (id, name, short_name, price, category)
                            VALUES (%s, %s, %s, %s, %s)
                            ON CONFLICT (id) DO UPDATE SET
                                name = EXCLUDED.name,
                                short_name = EXCLUDED.short_name,
                                price = EXCLUDED.price,
                                category = EXCLUDED.category,
                                updated_at = CURRENT_TIMESTAMP
                        """, (
                            product['id'],
                            product.get('name', ''),
                            product.get('short_name', ''),
                            product['price'],
                            product.get('category', '')
                        ))
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                        cursor.execute("""
                            INSERT INTO price_history (product_id, price)
                            VALUES (%s, %s)
                        """, (
                            product['id'],
                            product['price']
                        ))
                        
                        saved_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id')}: {e}")
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤")
            return saved_count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return 0

========================================

=== bot\Dockerfile ===

FROM python:3.11-slim

WORKDIR /app

RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY src/ ./src

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è src
WORKDIR /app/src

CMD ["python", "-u", "bot.py"]

========================================

=== bot\requirements.txt ===

aiogram==3.4.1
python-dotenv==1.0.1
requests==2.32.0
beautifulsoup4==4.12.3
psycopg2-binary==2.9.9

========================================

=== .env ===

# .env
BOT_TOKEN=8159036536:AAGl_OcC5cjpeZ71t9-ZMusl0eK3t33mSlg
CHANNEL_ID=@telo_v_poryadke_nlstar
LOG_LEVEL=INFO
X_AUTH_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiIxNzJlMWQyNi0zYjRhLTQxODMtODk4My1hOTI3NTMzZDkwNGUiLCJpbmJveF9pZCI6MTB9.epnRyvUy1pb2q9bRr-2dhPtpAeLF-G1Ob_xa8mC6g9A
CHECK_INTERVAL=18000
PERPLEXITY_API_KEY=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
DB_HOST=db
DB_PORT=5432
PGADMIN_PORT=6432

# PostgreSQL
POSTGRES_USER=mawr
POSTGRES_PASSWORD=metallica
POSTGRES_DB=nlstore

# pgAdmin
PGADMIN_DEFAULT_EMAIL=admin@admin.com
PGADMIN_DEFAULT_PASSWORD=metallica


========================================

=== pgadmin\setup.sh ===

#!/bin/bash

# –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ pgAdmin
while ! curl -s http://localhost:80 > /dev/null; do
  echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ pgAdmin..."
  sleep 5
done

# –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
curl -v -X POST "http://localhost:80/browser/server/create" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "NL Store DB",
    "host": "db",
    "port": 5432,
    "username": "'"$POSTGRES_USER"'",
    "password": "'"$POSTGRES_PASSWORD"'",
    "db": "'"$POSTGRES_DB"'",
    "sslmode": "prefer"
  }'

echo "–°–µ—Ä–≤–µ—Ä NL Store DB —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ pgAdmin"

========================================

=== docker-compose.yml ===

version: '3.8'

services:
  bot:
    build: ./bot
    env_file: 
      - ./.env
      - ./bot/.env
    working_dir: /app/src  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ–ø–µ—Ä—å –≤ src
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15
    env_file: ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    env_file: ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  pgadmin_data:

========================================

=== .gitignore ===

# Data files
*.json
*.db
*.csv
.*

# Environment
.env
venv/
bot/.env

# Docker
data/

========================================

=== project-export.txt ===

PROJECT EXPORT

PROJECT STRUCTURE:

üìÅ bot
  üìÅ src
    üìÑ bot.py
    üìÑ config.py
    üìÑ database.py
    üìÑ perplexity.py
    üìÑ postgres_db.py
    üìÑ scraper.py
    üìÑ state_utils.py
    üìÑ telegram_utils.py
    üìÑ text_utils.py
  üìÑ .env
  üìÑ Dockerfile
  üìÑ requirements.txt
üìÅ data
üìÅ logs
üìÅ pgadmin
  üìÑ setup.sh
üìÑ .env
üìÑ .gitignore
üìÑ docker-compose.yml
üìÑ project-export.txt
üìÑ README.md

FILES:

=== README.md ===

##Settings for connect
Host name/address: db
Port: 5432
Maintenance database: nlstore
Username: {your_username}
Password: {your_pass}


#work with db throw query service:
#check catalog
SELECT datname FROM pg_catalog.pg_database WHERE datistemplate = false;

#check tables
SELECT tablename FROM pg_tables WHERE schemaname = 'public';




========================================

=== bot\.env ===

#bot/.env
BOT_TOKEN=${BOT_TOKEN}
CHANNEL_ID=${CHANNEL_ID}
PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
CHECK_INTERVAL=${CHECK_INTERVAL}
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_NAME=${POSTGRES_DB}
DB_USER=${POSTGRES_USER}
DB_PASSWORD=${POSTGRES_PASSWORD}

========================================

=== bot\src\text_utils.py ===

import re
import html

def clean_telegram_html(text: str) -> str:
    return re.sub(r"</?think>", "", text)

def convert_markdown_links_to_html(text: str) -> str:
    def replace_link(match):
        return f'<a href="{html.escape(match.group(2), quote=True)}">{html.escape(match.group(1))}</a>'
    return re.sub(r'\[([^\]]+)\]\(([^)]+)\)', replace_link, text)

========================================

=== bot\src\config.py ===

# bot/src/config.py
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")



========================================

=== bot\src\telegram_utils.py ===

import logging
from aiogram import Bot

logger = logging.getLogger(__name__)

async def send_long_message(bot: Bot, chat_id: int, text: str, parse_mode=None, **kwargs):
    limit = 4096
    for i in range(0, len(text), limit):
        part = text[i:i+limit]
        await bot.send_message(chat_id, part, parse_mode=parse_mode, **kwargs)

========================================

=== bot\src\bot.py ===

import os
import asyncio
import logging
from perplexity_ai import init_perplexity, ask_perplexity
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.exceptions import TelegramBadRequest

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (—É–±—Ä–∞–Ω—ã —Ç–æ—á–∫–∏)
from state_utils import load_state, save_state, load_pinned_message_id, save_pinned_message_id
from scraper import fetch_products
from perplexity import ask_perplexity, init_perplexity
from telegram_utils import send_long_message
from text_utils import clean_telegram_html, convert_markdown_links_to_html

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "18000"))



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Perplexity API
if PERPLEXITY_API_KEY:
    init_perplexity(PERPLEXITY_API_KEY)
    answer = ask_perplexity("–ö–∞–∫–∞—è –ø–æ–ª—å–∑–∞ —É –∫–æ–ª–ª–∞–≥–µ–Ω–∞?")
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
router = Router()


@router.channel_post()
async def channel_post_handler(message: types.Message):
    if not PERPLEXITY_API_KEY:
        await message.reply("Perplexity API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    user_query = message.text
    if not user_query:
        return

    try:
        mention = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>' if message.from_user else None

        await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {user_query[:50]}...")
        
        loop = asyncio.get_event_loop()
        raw_answer = await loop.run_in_executor(None, ask_perplexity, user_query)
        
        cleaned_answer = clean_telegram_html(raw_answer)
        answer_with_links = convert_markdown_links_to_html(cleaned_answer)

        reply_text = f"{mention}, {answer_with_links}" if mention else answer_with_links

        await send_long_message(
            bot=message.bot,
            chat_id=message.chat.id,
            text=reply_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

async def price_scraping_loop(bot: Bot):
    await asyncio.sleep(10)
    logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω")
    
    while True:
        try:
            products = fetch_products()
            old_state = load_state()
            pinned_message_id = load_pinned_message_id()
            new_state = {}
            price_drop_messages = []
            price_increase_detected = False

            for product in products:
                try:
                    product_id = str(product.get('id', ''))
                    product_name = str(product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                    new_price = product.get('price', 0)
                    if isinstance(new_price, dict):
                        new_price = new_price.get('current', 0)
                    new_price = float(new_price)
                    
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    if product_id not in old_state:
                        new_state[product_id] = {
                            'price': new_price,
                            'last_notified_price': new_price
                        }
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    state_data = old_state.get(product_id, {})
                    old_price = float(state_data.get('price', new_price))
                    last_notified = float(state_data.get('last_notified_price', old_price))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    new_state[product_id] = {
                        'price': new_price,
                        'last_notified_price': last_notified
                    }

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    if new_price < old_price and new_price != last_notified:
                        msg = f"üìâ –¶–µ–Ω–∞ –Ω–∞ '{product_name}' —Å–Ω–∏–∑–∏–ª–∞—Å—å: {old_price} ‚ÇΩ ‚Üí {new_price} ‚ÇΩ"
                        price_drop_messages.append(msg)
                        new_state[product_id]['last_notified_price'] = new_price
                    elif new_price > old_price:
                        price_increase_detected = True
                        new_state[product_id]['last_notified_price'] = new_price

                except (KeyError, ValueError, TypeError) as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä: {e}")

            if price_drop_messages:
                full_message = "üî• **–ê–ö–¶–ò–Ø!**\n\n" + "\n".join(price_drop_messages)
                sent_message = await bot.send_message(CHANNEL_ID, full_message, parse_mode="Markdown")
                await bot.pin_chat_message(CHANNEL_ID, sent_message.message_id)
                save_pinned_message_id(sent_message.message_id)
            elif price_increase_detected and pinned_message_id:
                await bot.unpin_chat_message(CHANNEL_ID, pinned_message_id)
                save_pinned_message_id(None)

            save_state(new_state)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(price_drop_messages)}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω: {e}")

        await asyncio.sleep(CHECK_INTERVAL)
        
@router.message(Command("stats"))
async def send_stats(message: types.Message):
    try:
        stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
        stats += f"‚Ä¢ –î–æ—Å—Ç—É–ø –≤ pgAdmin: http://localhost:6432\n"
        stats += f"  –õ–æ–≥–∏–Ω: admin@admin.com\n"
        stats += f"  –ü–∞—Ä–æ–ª—å: metallica"
        await message.reply(stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    asyncio.create_task(price_scraping_loop(bot))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

========================================

=== bot\src\state_utils.py ===

import logging
from database import Database 

logger = logging.getLogger(__name__)

def load_state():
    try:
        db = Database.get_instance()
        return db.load_state('price_state')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {}

def save_state(state):
    try:
        db = Database.get_instance()
        db.save_state('price_state', state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def load_pinned_message_id():
    try:
        db = Database.get_instance()
        state = db.load_state('pinned_message')
        return state.get('pinned_message_id')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def save_pinned_message_id(message_id):
    try:
        db = Database.get_instance()
        db.save_state('pinned_message', {'pinned_message_id': message_id})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

========================================

=== bot\src\perplexity.py ===

import requests
import logging
from typing import List, Dict, Optional

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è "–ë–î" –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é) ---
class ProductDatabase:
    def __init__(self):
        self.products = []
    
    def sync_demo_products(self):
        demo_products = [
            {
                "id": 1,
                "name": "–ö–æ–ª–ª–∞–≥–µ–Ω –£–ª—å—Ç—Ä–∞",
                "description": "–ì–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–ª–ª–∞–≥–µ–Ω —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º C",
                "benefits": "–£–ª—É—á—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏, –≤–æ–ª–æ—Å –∏ –Ω–æ–≥—Ç–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å—É—Å—Ç–∞–≤–æ–≤",
                "ingredients": "–ö–æ–ª–ª–∞–≥–µ–Ω –≥–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (10 –≥), –≤–∏—Ç–∞–º–∏–Ω C (80 –º–≥)",
                "usage": "–ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ 1 —Å–∞—à–µ –≤ –¥–µ–Ω—å, —Ä–∞—Å—Ç–≤–æ—Ä–∏–≤ –≤ –≤–æ–¥–µ"
            },
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        ]
        self.products = demo_products
    
    def search_products(self, query: str) -> List[Dict]:
        found = []
        query_l = query.lower()
        for prod in self.products:
            text = (prod['name'] + ' ' + prod['description'] + ' ' + prod['benefits']).lower()
            if query_l in text:
                found.append(prod)
        return found


# --- –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Åc –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Perplexity API ---
class PerplexityAPI:
    BASE_URL = "https://api.perplexity.ai/chat/completions"
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.db = ProductDatabase()
        self.db.sync_demo_products()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-—Ç–æ–≤–∞—Ä—ã
    
    def ask(self, query: str) -> str:
        try:
            relevant = self.db.search_products(query)
            product_context = ""
            if relevant:
                product_context = "\n\n### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö:\n"
                for prod in relevant:
                    product_context += (
                        f"- {prod['name']}: {prod['description']}\n"
                        f"  –ü–æ–ª—å–∑–∞: {prod['benefits']}\n"
                    )
            # –§–æ—Ä–º–∏—Ä—É–µ–º ‚Äú–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏‚Äù –¥–ª—è –ò–ò
            system_prompt = (
                "–¢—ã - –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥-—ç–∫—Å–ø–µ—Ä—Ç –æ—Ç NL INTERNATIONAL. "
                "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ, –Ω–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤.\n"
                f"{product_context}"
            )
            user_prompt = (
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                "- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
                "- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º\n"
                "- –ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Å—Å—ã–ª–æ–∫\n"
                "- –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: [NL INTERNATIONAL](https://nlstar.com)\n"
                "- –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n\n"
                f'–í–æ–ø—Ä–æ—Å: "{query}"'
            )
            payload = {
                "model": "sonar-pro",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                "max_tokens": 1000,
                "temperature": 0.3,
            }
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            response = requests.post(
                self.BASE_URL,
                json=payload,
                headers=headers,
                timeout=30
            )
            response.raise_for_status()
            resp_json = response.json()
            return resp_json["choices"][0]["message"]["content"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ----
perplexity_api: Optional[PerplexityAPI] = None

def init_perplexity(api_key: str):
    global perplexity_api
    perplexity_api = PerplexityAPI(api_key)
    logger.info("Perplexity API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

def ask_perplexity(query: str) -> str:
    if not perplexity_api:
        return "Perplexity API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ init_perplexity(api_key)."
    return perplexity_api.ask(query)

# --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é) ---
if __name__ == "__main__":
    import os
    API_KEY = os.getenv("PERPLEXITY_API_KEY", "your_api_key_here")
    init_perplexity(API_KEY)
    while True:
        q = input("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏: ")
        print(ask_perplexity(q))


========================================

=== bot\src\scraper.py ===

import requests
import logging
from database import Database

logger = logging.getLogger(__name__)

def fetch_products():
    try:
        url = "https://ng.nlstar.com/ru/api/store/city/2214/all-products/"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
        }
        logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å {url}")
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        products = data.get("products", [])
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        normalized = []
        for p in products:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                price = p.get('price', 0)
                if isinstance(price, dict):
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    price = price.get('current', 0)
                if isinstance(price, str):
                    price = price.replace(' ', '').replace(',', '.')
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
                try:
                    price = float(price)
                except (ValueError, TypeError):
                    price = 0.0
                
                normalized.append({
                    'id': str(p.get('id', '')),
                    'name': str(p.get('name') or p.get('short_name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    'short_name': str(p.get('short_name', '')),
                    'price': price,
                    'category': str(p.get('category', ''))})
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db = Database.get_instance()
        saved = db.save_products(normalized)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î")
        
        return normalized
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return []

========================================

=== bot\src\database.py ===

import psycopg2
import os
import logging
import time
import json

logger = logging.getLogger(__name__)

class Database:
    _instance = None
    
    @classmethod
    def get_instance(cls):
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance
    
    def __init__(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self, retries=5, delay=3):
        for i in range(retries):
            try:
                self.conn = psycopg2.connect(
                    host=os.getenv("DB_HOST", "db"),
                    port=os.getenv("DB_PORT", "5432"),
                    dbname=os.getenv("DB_NAME", "nlstore"),
                    user=os.getenv("DB_USER", "mawr"),
                    password=os.getenv("DB_PASSWORD", "metallica")
                )
                self.conn.autocommit = True
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}): {e}")
                if i < retries - 1:
                    time.sleep(delay)
        
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
    
    def create_tables(self):
        if not self.conn:
            return
            
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS products (
                        id VARCHAR(50) PRIMARY KEY,
                        name TEXT NOT NULL,
                        short_name TEXT,
                        price FLOAT NOT NULL,
                        category TEXT,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS price_history (
                        id SERIAL PRIMARY KEY,
                        product_id VARCHAR(50) NOT NULL,
                        price FLOAT NOT NULL,
                        recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS bot_state (
                        key VARCHAR(50) PRIMARY KEY,
                        value JSONB NOT NULL
                    )
                """)
                
                logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def save_products(self, products):
        if not self.conn or not products:
            return 0
            
        saved_count = 0
        try:
            with self.conn.cursor() as cursor:
                for product in products:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                        product_id = str(product.get('id', ''))
                        name = str(product.get('name', ''))
                        short_name = str(product.get('short_name', ''))
                        price = float(product.get('price', 0))
                        category = str(product.get('category', ''))
                        
                        cursor.execute("""
                            INSERT INTO products (id, name, short_name, price, category)
                            VALUES (%s, %s, %s, %s, %s)
                            ON CONFLICT (id) DO UPDATE SET
                                name = EXCLUDED.name,
                                short_name = EXCLUDED.short_name,
                                price = EXCLUDED.price,
                                category = EXCLUDED.category,
                                updated_at = CURRENT_TIMESTAMP
                        """, (product_id, name, short_name, price, category))
                        
                        cursor.execute("""
                            INSERT INTO price_history (product_id, price)
                            VALUES (%s, %s)
                        """, (product_id, price))
                        
                        saved_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id')}: {e}")
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        
        return saved_count
    
    def save_state(self, key, state):
        if not self.conn:
            return
            
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO bot_state (key, value)
                    VALUES (%s, %s)
                    ON CONFLICT (key) DO UPDATE SET
                        value = EXCLUDED.value
                """, (key, json.dumps(state)))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_state(self, key):
        if not self.conn:
            return {}
            
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("SELECT value FROM bot_state WHERE key = %s", (key,))
                result = cursor.fetchone()
                return json.loads(result[0]) if result else {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return {}

========================================

=== bot\src\postgres_db.py ===

import psycopg2
from psycopg2 import sql
from psycopg2.extras import DictCursor
import os
import logging
import time
import json

logger = logging.getLogger(__name__)

class PostgresDB:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(PostgresDB, cls).__new__(cls)
            cls._instance._init_db()
        return cls._instance
    
    def _init_db(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self, retries=5, delay=3):
        for i in range(retries):
            try:
                self.conn = psycopg2.connect(
                    host=os.getenv("DB_HOST", "db"),
                    port=os.getenv("DB_PORT", "5432"),
                    dbname=os.getenv("DB_NAME", "nlstore"),
                    user=os.getenv("DB_USER", "mawr"),
                    password=os.getenv("DB_PASSWORD", "metallica")
                )
                self.conn.autocommit = True
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}): {e}")
                if i < retries - 1:
                    time.sleep(delay)
        
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    def create_tables(self):
        try:
            with self.conn.cursor() as cursor:
                # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS products (
                        id VARCHAR(50) PRIMARY KEY,
                        name TEXT NOT NULL,
                        short_name TEXT,
                        price FLOAT NOT NULL,
                        category TEXT,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS price_history (
                        id SERIAL PRIMARY KEY,
                        product_id VARCHAR(50) NOT NULL,
                        price FLOAT NOT NULL,
                        recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS bot_state (
                        key VARCHAR(50) PRIMARY KEY,
                        value JSONB NOT NULL
                    )
                """)
                
                logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

    def save_products(self, products):
        if not products:
            logger.warning("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î...")
        saved_count = 0
        
        try:
            with self.conn.cursor() as cursor:
                for product in products:
                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                        cursor.execute("""
                            INSERT INTO products (id, name, short_name, price, category)
                            VALUES (%s, %s, %s, %s, %s)
                            ON CONFLICT (id) DO UPDATE SET
                                name = EXCLUDED.name,
                                short_name = EXCLUDED.short_name,
                                price = EXCLUDED.price,
                                category = EXCLUDED.category,
                                updated_at = CURRENT_TIMESTAMP
                        """, (
                            product['id'],
                            product.get('name', ''),
                            product.get('short_name', ''),
                            product['price'],
                            product.get('category', '')
                        ))
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                        cursor.execute("""
                            INSERT INTO price_history (product_id, price)
                            VALUES (%s, %s)
                        """, (
                            product['id'],
                            product['price']
                        ))
                        
                        saved_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id')}: {e}")
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤")
            return saved_count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return 0

========================================

=== bot\Dockerfile ===

FROM python:3.11-slim

WORKDIR /app

RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY src/ ./src

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è src
WORKDIR /app/src

CMD ["python", "-u", "bot.py"]

========================================

=== bot\requirements.txt ===

aiogram==3.4.1
python-dotenv==1.0.1
requests==2.32.0
beautifulsoup4==4.12.3
psycopg2-binary==2.9.9

========================================

=== .env ===

# .env
BOT_TOKEN=8159036536:AAGl_OcC5cjpeZ71t9-ZMusl0eK3t33mSlg
CHANNEL_ID=@telo_v_poryadke_nlstar
LOG_LEVEL=INFO
X_AUTH_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiIxNzJlMWQyNi0zYjRhLTQxODMtODk4My1hOTI3NTMzZDkwNGUiLCJpbmJveF9pZCI6MTB9.epnRyvUy1pb2q9bRr-2dhPtpAeLF-G1Ob_xa8mC6g9A
CHECK_INTERVAL=18000
PERPLEXITY_API_KEY=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
DB_HOST=db
DB_PORT=5432
PGADMIN_PORT=6432

# PostgreSQL
POSTGRES_USER=mawr
POSTGRES_PASSWORD=metallica
POSTGRES_DB=nlstore

# pgAdmin
PGADMIN_DEFAULT_EMAIL=admin@admin.com
PGADMIN_DEFAULT_PASSWORD=metallica


========================================

=== pgadmin\setup.sh ===

#!/bin/bash

# –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ pgAdmin
while ! curl -s http://localhost:80 > /dev/null; do
  echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ pgAdmin..."
  sleep 5
done

# –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
curl -v -X POST "http://localhost:80/browser/server/create" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "NL Store DB",
    "host": "db",
    "port": 5432,
    "username": "'"$POSTGRES_USER"'",
    "password": "'"$POSTGRES_PASSWORD"'",
    "db": "'"$POSTGRES_DB"'",
    "sslmode": "prefer"
  }'

echo "–°–µ—Ä–≤–µ—Ä NL Store DB —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ pgAdmin"

========================================

=== docker-compose.yml ===

version: '3.8'

services:
  bot:
    build: ./bot
    env_file: 
      - ./.env
      - ./bot/.env
    working_dir: /app/src  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ–ø–µ—Ä—å –≤ src
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15
    env_file: ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    env_file: ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  pgadmin_data:

========================================

=== .gitignore ===

# Data files
*.json
*.db
*.csv
.*

# Environment
.env
venv/
bot/.env

# Docker
data/

========================================

=== project-export.txt ===

PROJECT EXPORT

PROJECT STRUCTURE:

üìÅ bot
  üìÅ src
    üìÑ bot.py
    üìÑ config.py
    üìÑ database.py
    üìÑ perplexity.py
    üìÑ postgres_db.py
    üìÑ scraper.py
    üìÑ state_utils.py
    üìÑ telegram_utils.py
    üìÑ text_utils.py
  üìÑ .env
  üìÑ Dockerfile
  üìÑ requirements.txt
üìÅ data
üìÅ logs
üìÅ pgadmin
  üìÑ setup.sh
üìÑ .env
üìÑ .gitignore
üìÑ docker-compose.yml
üìÑ README.md

FILES:

=== README.md ===

##Settings for connect
Host name/address: db
Port: 5432
Maintenance database: nlstore
Username: {your_username}
Password: {your_pass}


#work with db throw query service:
#check catalog
SELECT datname FROM pg_catalog.pg_database WHERE datistemplate = false;

#check tables
SELECT tablename FROM pg_tables WHERE schemaname = 'public';




========================================

=== bot\.env ===

#bot/.env
BOT_TOKEN=${BOT_TOKEN}
CHANNEL_ID=${CHANNEL_ID}
PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
CHECK_INTERVAL=${CHECK_INTERVAL}
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_NAME=${POSTGRES_DB}
DB_USER=${POSTGRES_USER}
DB_PASSWORD=${POSTGRES_PASSWORD}

========================================

=== bot\src\text_utils.py ===

import re
import html

def clean_telegram_html(text: str) -> str:
    return re.sub(r"</?think>", "", text)

def convert_markdown_links_to_html(text: str) -> str:
    def replace_link(match):
        return f'<a href="{html.escape(match.group(2), quote=True)}">{html.escape(match.group(1))}</a>'
    return re.sub(r'\[([^\]]+)\]\(([^)]+)\)', replace_link, text)

========================================

=== bot\src\config.py ===

# bot/src/config.py
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")



========================================

=== bot\src\telegram_utils.py ===

import logging
from aiogram import Bot

logger = logging.getLogger(__name__)

async def send_long_message(bot: Bot, chat_id: int, text: str, parse_mode=None, **kwargs):
    limit = 4096
    for i in range(0, len(text), limit):
        part = text[i:i+limit]
        await bot.send_message(chat_id, part, parse_mode=parse_mode, **kwargs)

========================================

=== bot\src\bot.py ===

import os
import asyncio
import logging
from perplexity_ai import init_perplexity, ask_perplexity
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.exceptions import TelegramBadRequest

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (—É–±—Ä–∞–Ω—ã —Ç–æ—á–∫–∏)
from state_utils import load_state, save_state, load_pinned_message_id, save_pinned_message_id
from scraper import fetch_products
from perplexity import ask_perplexity, init_perplexity
from telegram_utils import send_long_message
from text_utils import clean_telegram_html, convert_markdown_links_to_html

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "18000"))



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Perplexity API
if PERPLEXITY_API_KEY:
    init_perplexity(PERPLEXITY_API_KEY)
    answer = ask_perplexity("–ö–∞–∫–∞—è –ø–æ–ª—å–∑–∞ —É –∫–æ–ª–ª–∞–≥–µ–Ω–∞?")
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
router = Router()


@router.channel_post()
async def channel_post_handler(message: types.Message):
    if not PERPLEXITY_API_KEY:
        await message.reply("Perplexity API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    user_query = message.text
    if not user_query:
        return

    try:
        mention = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>' if message.from_user else None

        await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {user_query[:50]}...")
        
        loop = asyncio.get_event_loop()
        raw_answer = await loop.run_in_executor(None, ask_perplexity, user_query)
        
        cleaned_answer = clean_telegram_html(raw_answer)
        answer_with_links = convert_markdown_links_to_html(cleaned_answer)

        reply_text = f"{mention}, {answer_with_links}" if mention else answer_with_links

        await send_long_message(
            bot=message.bot,
            chat_id=message.chat.id,
            text=reply_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

async def price_scraping_loop(bot: Bot):
    await asyncio.sleep(10)
    logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω")
    
    while True:
        try:
            products = fetch_products()
            old_state = load_state()
            pinned_message_id = load_pinned_message_id()
            new_state = {}
            price_drop_messages = []
            price_increase_detected = False

            for product in products:
                try:
                    product_id = str(product.get('id', ''))
                    product_name = str(product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                    new_price = product.get('price', 0)
                    if isinstance(new_price, dict):
                        new_price = new_price.get('current', 0)
                    new_price = float(new_price)
                    
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    if product_id not in old_state:
                        new_state[product_id] = {
                            'price': new_price,
                            'last_notified_price': new_price
                        }
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    state_data = old_state.get(product_id, {})
                    old_price = float(state_data.get('price', new_price))
                    last_notified = float(state_data.get('last_notified_price', old_price))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    new_state[product_id] = {
                        'price': new_price,
                        'last_notified_price': last_notified
                    }

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    if new_price < old_price and new_price != last_notified:
                        msg = f"üìâ –¶–µ–Ω–∞ –Ω–∞ '{product_name}' —Å–Ω–∏–∑–∏–ª–∞—Å—å: {old_price} ‚ÇΩ ‚Üí {new_price} ‚ÇΩ"
                        price_drop_messages.append(msg)
                        new_state[product_id]['last_notified_price'] = new_price
                    elif new_price > old_price:
                        price_increase_detected = True
                        new_state[product_id]['last_notified_price'] = new_price

                except (KeyError, ValueError, TypeError) as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä: {e}")

            if price_drop_messages:
                full_message = "üî• **–ê–ö–¶–ò–Ø!**\n\n" + "\n".join(price_drop_messages)
                sent_message = await bot.send_message(CHANNEL_ID, full_message, parse_mode="Markdown")
                await bot.pin_chat_message(CHANNEL_ID, sent_message.message_id)
                save_pinned_message_id(sent_message.message_id)
            elif price_increase_detected and pinned_message_id:
                await bot.unpin_chat_message(CHANNEL_ID, pinned_message_id)
                save_pinned_message_id(None)

            save_state(new_state)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(price_drop_messages)}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω: {e}")

        await asyncio.sleep(CHECK_INTERVAL)
        
@router.message(Command("stats"))
async def send_stats(message: types.Message):
    try:
        stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
        stats += f"‚Ä¢ –î–æ—Å—Ç—É–ø –≤ pgAdmin: http://localhost:6432\n"
        stats += f"  –õ–æ–≥–∏–Ω: admin@admin.com\n"
        stats += f"  –ü–∞—Ä–æ–ª—å: metallica"
        await message.reply(stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    asyncio.create_task(price_scraping_loop(bot))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

========================================

=== bot\src\state_utils.py ===

import logging
from database import Database 

logger = logging.getLogger(__name__)

def load_state():
    try:
        db = Database.get_instance()
        return db.load_state('price_state')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {}

def save_state(state):
    try:
        db = Database.get_instance()
        db.save_state('price_state', state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def load_pinned_message_id():
    try:
        db = Database.get_instance()
        state = db.load_state('pinned_message')
        return state.get('pinned_message_id')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def save_pinned_message_id(message_id):
    try:
        db = Database.get_instance()
        db.save_state('pinned_message', {'pinned_message_id': message_id})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

========================================

=== bot\src\perplexity.py ===

import requests
import logging
from typing import List, Dict, Optional

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è "–ë–î" –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é) ---
class ProductDatabase:
    def __init__(self):
        self.products = []
    
    def sync_demo_products(self):
        demo_products = [
            {
                "id": 1,
                "name": "–ö–æ–ª–ª–∞–≥–µ–Ω –£–ª—å—Ç—Ä–∞",
                "description": "–ì–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–ª–ª–∞–≥–µ–Ω —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º C",
                "benefits": "–£–ª—É—á—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏, –≤–æ–ª–æ—Å –∏ –Ω–æ–≥—Ç–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å—É—Å—Ç–∞–≤–æ–≤",
                "ingredients": "–ö–æ–ª–ª–∞–≥–µ–Ω –≥–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (10 –≥), –≤–∏—Ç–∞–º–∏–Ω C (80 –º–≥)",
                "usage": "–ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ 1 —Å–∞—à–µ –≤ –¥–µ–Ω—å, —Ä–∞—Å—Ç–≤–æ—Ä–∏–≤ –≤ –≤–æ–¥–µ"
            },
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        ]
        self.products = demo_products
    
    def search_products(self, query: str) -> List[Dict]:
        found = []
        query_l = query.lower()
        for prod in self.products:
            text = (prod['name'] + ' ' + prod['description'] + ' ' + prod['benefits']).lower()
            if query_l in text:
                found.append(prod)
        return found


# --- –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Åc –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Perplexity API ---
class PerplexityAPI:
    BASE_URL = "https://api.perplexity.ai/chat/completions"
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.db = ProductDatabase()
        self.db.sync_demo_products()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-—Ç–æ–≤–∞—Ä—ã
    
    def ask(self, query: str) -> str:
        try:
            relevant = self.db.search_products(query)
            product_context = ""
            if relevant:
                product_context = "\n\n### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö:\n"
                for prod in relevant:
                    product_context += (
                        f"- {prod['name']}: {prod['description']}\n"
                        f"  –ü–æ–ª—å–∑–∞: {prod['benefits']}\n"
                    )
            # –§–æ—Ä–º–∏—Ä—É–µ–º ‚Äú–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏‚Äù –¥–ª—è –ò–ò
            system_prompt = (
                "–¢—ã - –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥-—ç–∫—Å–ø–µ—Ä—Ç –æ—Ç NL INTERNATIONAL. "
                "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ, –Ω–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤.\n"
                f"{product_context}"
            )
            user_prompt = (
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                "- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
                "- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º\n"
                "- –ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Å—Å—ã–ª–æ–∫\n"
                "- –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: [NL INTERNATIONAL](https://nlstar.com)\n"
                "- –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n\n"
                f'–í–æ–ø—Ä–æ—Å: "{query}"'
            )
            payload = {
                "model": "sonar-pro",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                "max_tokens": 1000,
                "temperature": 0.3,
            }
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            response = requests.post(
                self.BASE_URL,
                json=payload,
                headers=headers,
                timeout=30
            )
            response.raise_for_status()
            resp_json = response.json()
            return resp_json["choices"][0]["message"]["content"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ----
perplexity_api: Optional[PerplexityAPI] = None

def init_perplexity(api_key: str):
    global perplexity_api
    perplexity_api = PerplexityAPI(api_key)
    logger.info("Perplexity API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

def ask_perplexity(query: str) -> str:
    if not perplexity_api:
        return "Perplexity API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ init_perplexity(api_key)."
    return perplexity_api.ask(query)

# --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é) ---
if __name__ == "__main__":
    import os
    API_KEY = os.getenv("PERPLEXITY_API_KEY", "your_api_key_here")
    init_perplexity(API_KEY)
    while True:
        q = input("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏: ")
        print(ask_perplexity(q))


========================================

=== bot\src\scraper.py ===

import requests
import logging
from database import Database

logger = logging.getLogger(__name__)

def fetch_products():
    try:
        url = "https://ng.nlstar.com/ru/api/store/city/2214/all-products/"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
        }
        logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å {url}")
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        products = data.get("products", [])
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        normalized = []
        for p in products:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                price = p.get('price', 0)
                if isinstance(price, dict):
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    price = price.get('current', 0)
                if isinstance(price, str):
                    price = price.replace(' ', '').replace(',', '.')
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
                try:
                    price = float(price)
                except (ValueError, TypeError):
                    price = 0.0
                
                normalized.append({
                    'id': str(p.get('id', '')),
                    'name': str(p.get('name') or p.get('short_name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    'short_name': str(p.get('short_name', '')),
                    'price': price,
                    'category': str(p.get('category', ''))})
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db = Database.get_instance()
        saved = db.save_products(normalized)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î")
        
        return normalized
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return []

========================================

=== bot\src\database.py ===

import psycopg2
import os
import logging
import time
import json

logger = logging.getLogger(__name__)

class Database:
    _instance = None
    
    @classmethod
    def get_instance(cls):
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance
    
    def __init__(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self, retries=5, delay=3):
        for i in range(retries):
            try:
                self.conn = psycopg2.connect(
                    host=os.getenv("DB_HOST", "db"),
                    port=os.getenv("DB_PORT", "5432"),
                    dbname=os.getenv("DB_NAME", "nlstore"),
                    user=os.getenv("DB_USER", "mawr"),
                    password=os.getenv("DB_PASSWORD", "metallica")
                )
                self.conn.autocommit = True
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}): {e}")
                if i < retries - 1:
                    time.sleep(delay)
        
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
    
    def create_tables(self):
        if not self.conn:
            return
            
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS products (
                        id VARCHAR(50) PRIMARY KEY,
                        name TEXT NOT NULL,
                        short_name TEXT,
                        price FLOAT NOT NULL,
                        category TEXT,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS price_history (
                        id SERIAL PRIMARY KEY,
                        product_id VARCHAR(50) NOT NULL,
                        price FLOAT NOT NULL,
                        recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS bot_state (
                        key VARCHAR(50) PRIMARY KEY,
                        value JSONB NOT NULL
                    )
                """)
                
                logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def save_products(self, products):
        if not self.conn or not products:
            return 0
            
        saved_count = 0
        try:
            with self.conn.cursor() as cursor:
                for product in products:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                        product_id = str(product.get('id', ''))
                        name = str(product.get('name', ''))
                        short_name = str(product.get('short_name', ''))
                        price = float(product.get('price', 0))
                        category = str(product.get('category', ''))
                        
                        cursor.execute("""
                            INSERT INTO products (id, name, short_name, price, category)
                            VALUES (%s, %s, %s, %s, %s)
                            ON CONFLICT (id) DO UPDATE SET
                                name = EXCLUDED.name,
                                short_name = EXCLUDED.short_name,
                                price = EXCLUDED.price,
                                category = EXCLUDED.category,
                                updated_at = CURRENT_TIMESTAMP
                        """, (product_id, name, short_name, price, category))
                        
                        cursor.execute("""
                            INSERT INTO price_history (product_id, price)
                            VALUES (%s, %s)
                        """, (product_id, price))
                        
                        saved_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id')}: {e}")
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        
        return saved_count
    
    def save_state(self, key, state):
        if not self.conn:
            return
            
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO bot_state (key, value)
                    VALUES (%s, %s)
                    ON CONFLICT (key) DO UPDATE SET
                        value = EXCLUDED.value
                """, (key, json.dumps(state)))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_state(self, key):
        if not self.conn:
            return {}
            
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("SELECT value FROM bot_state WHERE key = %s", (key,))
                result = cursor.fetchone()
                return json.loads(result[0]) if result else {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return {}

========================================

=== bot\src\postgres_db.py ===

import psycopg2
from psycopg2 import sql
from psycopg2.extras import DictCursor
import os
import logging
import time
import json

logger = logging.getLogger(__name__)

class PostgresDB:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(PostgresDB, cls).__new__(cls)
            cls._instance._init_db()
        return cls._instance
    
    def _init_db(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self, retries=5, delay=3):
        for i in range(retries):
            try:
                self.conn = psycopg2.connect(
                    host=os.getenv("DB_HOST", "db"),
                    port=os.getenv("DB_PORT", "5432"),
                    dbname=os.getenv("DB_NAME", "nlstore"),
                    user=os.getenv("DB_USER", "mawr"),
                    password=os.getenv("DB_PASSWORD", "metallica")
                )
                self.conn.autocommit = True
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}): {e}")
                if i < retries - 1:
                    time.sleep(delay)
        
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    def create_tables(self):
        try:
            with self.conn.cursor() as cursor:
                # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS products (
                        id VARCHAR(50) PRIMARY KEY,
                        name TEXT NOT NULL,
                        short_name TEXT,
                        price FLOAT NOT NULL,
                        category TEXT,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS price_history (
                        id SERIAL PRIMARY KEY,
                        product_id VARCHAR(50) NOT NULL,
                        price FLOAT NOT NULL,
                        recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS bot_state (
                        key VARCHAR(50) PRIMARY KEY,
                        value JSONB NOT NULL
                    )
                """)
                
                logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

    def save_products(self, products):
        if not products:
            logger.warning("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î...")
        saved_count = 0
        
        try:
            with self.conn.cursor() as cursor:
                for product in products:
                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                        cursor.execute("""
                            INSERT INTO products (id, name, short_name, price, category)
                            VALUES (%s, %s, %s, %s, %s)
                            ON CONFLICT (id) DO UPDATE SET
                                name = EXCLUDED.name,
                                short_name = EXCLUDED.short_name,
                                price = EXCLUDED.price,
                                category = EXCLUDED.category,
                                updated_at = CURRENT_TIMESTAMP
                        """, (
                            product['id'],
                            product.get('name', ''),
                            product.get('short_name', ''),
                            product['price'],
                            product.get('category', '')
                        ))
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                        cursor.execute("""
                            INSERT INTO price_history (product_id, price)
                            VALUES (%s, %s)
                        """, (
                            product['id'],
                            product['price']
                        ))
                        
                        saved_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id')}: {e}")
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤")
            return saved_count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return 0

========================================

=== bot\Dockerfile ===

FROM python:3.11-slim

WORKDIR /app

RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY src/ ./src

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è src
WORKDIR /app/src

CMD ["python", "-u", "bot.py"]

========================================

=== bot\requirements.txt ===

aiogram==3.4.1
python-dotenv==1.0.1
requests==2.32.0
beautifulsoup4==4.12.3
psycopg2-binary==2.9.9

========================================

=== .env ===

# .env
BOT_TOKEN=8159036536:AAGl_OcC5cjpeZ71t9-ZMusl0eK3t33mSlg
CHANNEL_ID=@telo_v_poryadke_nlstar
LOG_LEVEL=INFO
X_AUTH_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiIxNzJlMWQyNi0zYjRhLTQxODMtODk4My1hOTI3NTMzZDkwNGUiLCJpbmJveF9pZCI6MTB9.epnRyvUy1pb2q9bRr-2dhPtpAeLF-G1Ob_xa8mC6g9A
CHECK_INTERVAL=18000
PERPLEXITY_API_KEY=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
DB_HOST=db
DB_PORT=5432
PGADMIN_PORT=6432

# PostgreSQL
POSTGRES_USER=mawr
POSTGRES_PASSWORD=metallica
POSTGRES_DB=nlstore

# pgAdmin
PGADMIN_DEFAULT_EMAIL=admin@admin.com
PGADMIN_DEFAULT_PASSWORD=metallica


========================================

=== pgadmin\setup.sh ===

#!/bin/bash

# –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ pgAdmin
while ! curl -s http://localhost:80 > /dev/null; do
  echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ pgAdmin..."
  sleep 5
done

# –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
curl -v -X POST "http://localhost:80/browser/server/create" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "NL Store DB",
    "host": "db",
    "port": 5432,
    "username": "'"$POSTGRES_USER"'",
    "password": "'"$POSTGRES_PASSWORD"'",
    "db": "'"$POSTGRES_DB"'",
    "sslmode": "prefer"
  }'

echo "–°–µ—Ä–≤–µ—Ä NL Store DB —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ pgAdmin"

========================================

=== docker-compose.yml ===

version: '3.8'

services:
  bot:
    build: ./bot
    env_file: 
      - ./.env
      - ./bot/.env
    working_dir: /app/src  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ–ø–µ—Ä—å –≤ src
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15
    env_file: ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    env_file: ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  pgadmin_data:

========================================

=== .gitignore ===

# Data files
*.json
*.db
*.csv
.*

# Environment
.env
venv/
bot/.env

# Docker
data/

========================================



========================================



========================================



========================================

=== docker-compose.infrastructure.yml ===

version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: mawr
      POSTGRES_PASSWORD: metallica
      POSTGRES_DB: nlstore
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mawr -d nlstore"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: metallica
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "6432:80"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  pgadmin_data:


========================================



========================================

=== docker-compose.infrastructure.yml ===

version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: mawr
      POSTGRES_PASSWORD: metallica
      POSTGRES_DB: nlstore
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mawr -d nlstore"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: metallica
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "6432:80"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  pgadmin_data:


========================================

