import os
import asyncio
import logging
import re
import json
import html
from price_state import load_state, save_state
from novelty_price_scraper import fetch_products
from aiogram import Bot, Dispatcher, Router, types
from dotenv import load_dotenv
from aiogram.exceptions import TelegramBadRequest
from perplexity import ask_perplexity

load_dotenv()

PINNED_STATE_FILE = 'pinned_message_state.json'
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
X_AUTH_TOKEN = os.getenv("X_AUTH_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "18000"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
router = Router()

def load_pinned_message_id():
    try:
        if os.path.exists(PINNED_STATE_FILE):
            with open(PINNED_STATE_FILE, 'r') as f:
                data = json.load(f)
            return data.get('pinned_message_id')
    except (json.JSONDecodeError, IOError):
        return None
    return None

def save_pinned_message_id(message_id):
    with open(PINNED_STATE_FILE, 'w') as f:
        json.dump({'pinned_message_id': message_id}, f)

def clean_telegram_html(text: str) -> str:
    text = re.sub(r"</?think>", "", text)
    return text

def clean_llm_answer(answer, user_query):
    answer = answer.replace(user_query, "")
    for phrase in [
        "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å", "–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏", "–í–∞—à –≤–æ–ø—Ä–æ—Å",
        "–í–æ–ø—Ä–æ—Å:", "–ó–∞–ø—Ä–æ—Å:", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª",
    ]:
        answer = answer.replace(phrase, "")
    return answer.strip()

def convert_markdown_links_to_html(text: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Markdown-—Å—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](URL) –≤ HTML-—Ç–µ–≥–∏ <a href="URL">—Ç–µ–∫—Å—Ç</a>
    —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML-—Å–∏–º–≤–æ–ª–æ–≤.
    """
    def replace_link(match):
        link_text = html.escape(match.group(1))
        url = html.escape(match.group(2), quote=True)
        return f'<a href="{url}">{link_text}</a>'
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Markdown-—Å—Å—ã–ª–∫–∏, —Ç–∞–∫ –∏ —Å–Ω–æ—Å–∫–∏ [1], [2]
    text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', replace_link, text)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–Ω–æ—Å–∫–∏ –≤–∏–¥–∞ [1]: http://example.com
    footnote_pattern = re.compile(r'^\s*\[(\d+)\]:\s*(\S+)\s*$', re.MULTILINE)
    footnotes = {num: url for num, url in footnote_pattern.findall(text)}
    
    for num, url in footnotes.items():
        safe_url = html.escape(url, quote=True)
        text = text.replace(f'[{num}]', f'<a href="{safe_url}">[{num}]</a>')
    
    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ —Å–Ω–æ—Å–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    text = re.sub(r'\n\n\[(\d+)\]:\s*\S+\s*(\n\[(\d+)\]:\s*\S+\s*)*', '', text)
    
    return text

async def send_long_message(bot, chat_id, text, parse_mode=None, **kwargs):
    limit = 4096
    for i in range(0, len(text), limit):
        await bot.send_message(chat_id, text[i:i+limit], parse_mode=parse_mode, **kwargs)

@router.channel_post()
async def channel_post_handler(message: types.Message):
    if not PERPLEXITY_API_KEY:
        await message.reply("Perplexity API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    user_query = message.text
    if not user_query:
        return

    if message.from_user:
        mention = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>'
    else:
        mention = None

    await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
    loop = asyncio.get_event_loop()

    raw_answer = await loop.run_in_executor(None, ask_perplexity, user_query, PERPLEXITY_API_KEY)
    cleaned_answer = clean_telegram_html(raw_answer)
    answer_with_links = convert_markdown_links_to_html(cleaned_answer)

    if mention:
        reply_text = f"{mention}, {answer_with_links}"
    else:
        reply_text = answer_with_links

    await send_long_message(
        bot=message.bot,
        chat_id=message.chat.id,
        text=reply_text,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

async def price_scraping_loop(bot: Bot):
    await asyncio.sleep(10)
    while True:
        try:
            products = fetch_products()
            old_state = load_state()
            pinned_message_id = load_pinned_message_id()
            new_state = {}
            price_drop_messages = []
            price_increase_detected = False

            for product in products:
                required_keys = ['id', 'name', 'price']
                if not all(key in product for key in required_keys):
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏. –î–∞–Ω–Ω—ã–µ: {product}")
                    continue

                try:
                    product_id = str(product['id'])
                    new_price = float(product['price'])
                    product_name = product['name']
                except (ValueError, TypeError):
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –î–∞–Ω–Ω—ã–µ: {product}")
                    continue

                if product_id not in old_state:
                    new_state[product_id] = {'name': product_name, 'price': new_price, 'last_notified_price': new_price}
                    continue

                current_product_state = old_state[product_id]
                old_price = float(current_product_state.get('price'))
                last_notified_price = float(current_product_state.get('last_notified_price', old_price))

                new_state[product_id] = {'name': product_name, 'price': new_price, 'last_notified_price': last_notified_price}

                if new_price < old_price and new_price != last_notified_price:
                    msg = f"üìâ –¶–µ–Ω–∞ –Ω–∞ '{product_name}' —Å–Ω–∏–∑–∏–ª–∞—Å—å: {old_price} ‚ÇΩ ‚Üí {new_price} ‚ÇΩ"
                    price_drop_messages.append(msg)
                    new_state[product_id]['last_notified_price'] = new_price
                elif new_price > old_price:
                    price_increase_detected = True
                    new_state[product_id]['last_notified_price'] = new_price

            if price_drop_messages:
                full_message = "üî• **–ê–ö–¶–ò–Ø!**\n\n" + "\n".join(price_drop_messages)
                try:
                    sent_message = await bot.send_message(CHANNEL_ID, full_message, parse_mode="Markdown")
                    await bot.pin_chat_message(chat_id=CHANNEL_ID, message_id=sent_message.message_id, disable_notification=True)
                    save_pinned_message_id(sent_message.message_id)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ü–∏–∏ (ID: {sent_message.message_id}).")
                except TelegramBadRequest as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –±–æ—Ç–∞.")
                except Exception as e:
                    logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏: {e}")

            elif price_increase_detected and pinned_message_id:
                try:
                    await bot.unpin_chat_message(chat_id=CHANNEL_ID, message_id=pinned_message_id)
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {pinned_message_id} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑-–∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω.")
                    save_pinned_message_id(None)
                except TelegramBadRequest as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {pinned_message_id}: {e}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ.")
                    save_pinned_message_id(None)
                except Exception as e:
                    logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                logger.info("–ù–æ–≤—ã—Ö —Å–Ω–∏–∂–µ–Ω–∏–π —Ü–µ–Ω –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

            save_state(new_state)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω: {e}", exc_info=True)

        await asyncio.sleep(CHECK_INTERVAL)

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    asyncio.create_task(price_scraping_loop(bot))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())