import os
import asyncio
import logging
from perplexity import init_perplexity, ask_perplexity
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.exceptions import TelegramBadRequest

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (—É–±—Ä–∞–Ω—ã —Ç–æ—á–∫–∏)
from state_utils import load_state, save_state, load_pinned_message_id, save_pinned_message_id
from scraper import fetch_products
from perplexity import ask_perplexity, init_perplexity
from telegram_utils import send_long_message
from text_utils import clean_telegram_html, convert_markdown_links_to_html

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "18000"))



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Perplexity API
if PERPLEXITY_API_KEY:
    init_perplexity(PERPLEXITY_API_KEY)
    answer = ask_perplexity("–ö–∞–∫–∞—è –ø–æ–ª—å–∑–∞ —É –∫–æ–ª–ª–∞–≥–µ–Ω–∞?")
    
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
router = Router()


@router.channel_post()
async def channel_post_handler(message: types.Message):
    if not PERPLEXITY_API_KEY:
        await message.reply("Perplexity API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    user_query = message.text
    if not user_query:
        return

    try:
        mention = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>' if message.from_user else None

        await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {user_query[:50]}...")
        
        loop = asyncio.get_event_loop()
        raw_answer = await loop.run_in_executor(None, ask_perplexity, user_query)
        
        cleaned_answer = clean_telegram_html(raw_answer)
        answer_with_links = convert_markdown_links_to_html(cleaned_answer)

        reply_text = f"{mention}, {answer_with_links}" if mention else answer_with_links
 
        await send_long_message(
            bot=message.bot,
            chat_id=message.chat.id,
            text=reply_text,
            parse_mode="HTML",  # –í–∞–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-–ø–∞—Ä—Å–∏–Ω–≥
            disable_web_page_preview=True
        )
        logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

async def price_scraping_loop(bot: Bot):
    await asyncio.sleep(10)
    logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω")
    
    while True:
        try:
            products = fetch_products()
            old_state = load_state()
            pinned_message_id = load_pinned_message_id()
            new_state = {}
            price_drop_messages = []
            price_increase_detected = False

            for product in products:
                try:
                    product_id = str(product.get('id', ''))
                    product_name = str(product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                    new_price = product.get('price', 0)
                    if isinstance(new_price, dict):
                        new_price = new_price.get('current', 0)
                    new_price = float(new_price)
                    
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    if product_id not in old_state:
                        new_state[product_id] = {
                            'price': new_price,
                            'last_notified_price': new_price
                        }
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    state_data = old_state.get(product_id, {})
                    old_price = float(state_data.get('price', new_price))
                    last_notified = float(state_data.get('last_notified_price', old_price))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    new_state[product_id] = {
                        'price': new_price,
                        'last_notified_price': last_notified
                    }

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    if new_price < old_price and new_price != last_notified:
                        msg = f"üìâ –¶–µ–Ω–∞ –Ω–∞ '{product_name}' —Å–Ω–∏–∑–∏–ª–∞—Å—å: {old_price} ‚ÇΩ ‚Üí {new_price} ‚ÇΩ"
                        price_drop_messages.append(msg)
                        new_state[product_id]['last_notified_price'] = new_price
                    elif new_price > old_price:
                        price_increase_detected = True
                        new_state[product_id]['last_notified_price'] = new_price

                except (KeyError, ValueError, TypeError) as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä: {e}")

            if price_drop_messages:
                full_message = "üî• **–ê–ö–¶–ò–Ø!**\n\n" + "\n".join(price_drop_messages)
                sent_message = await bot.send_message(CHANNEL_ID, full_message, parse_mode="Markdown")
                await bot.pin_chat_message(CHANNEL_ID, sent_message.message_id)
                save_pinned_message_id(sent_message.message_id)
            elif price_increase_detected and pinned_message_id:
                await bot.unpin_chat_message(CHANNEL_ID, pinned_message_id)
                save_pinned_message_id(None)

            save_state(new_state)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(price_drop_messages)}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω: {e}")

        await asyncio.sleep(CHECK_INTERVAL)
        
@router.message(Command("stats"))
async def send_stats(message: types.Message):
    try:
        stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
        stats += f"‚Ä¢ –î–æ—Å—Ç—É–ø –≤ pgAdmin: http://localhost:6432\n"
        stats += f"  –õ–æ–≥–∏–Ω: admin@admin.com\n"
        stats += f"  –ü–∞—Ä–æ–ª—å: metallica"
        await message.reply(stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    asyncio.create_task(price_scraping_loop(bot))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())